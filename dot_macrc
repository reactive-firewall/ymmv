#!/usr/bin/env bash

# Close any open System Preferences panes, to prevent them from overriding
# settings we're about to change
#osascript -e 'tell application "System Preferences" to quit' || true ;

export LANG=${LANG:-"en_US"}
source ~/.bashrc 2>/dev/null || true

hash -p /usr/libexec/PlistBuddy PlistBuddy

#-----------------------------------------------------------#
# Variables                                                 #
#-----------------------------------------------------------#

export DEFAULT_SAVE_LOCATION="~/Documents"

if [[ ( -e "/Volumes/Music Drive/Music/" ) ]] ; then
	export MUSIC_LIBRARY_LOCATION="/Volumes/Music Drive/Music/Media/"
else
	if [[ ( -d "/Users/Shared/Music/" ) ]] ; then
		export MUSIC_LIBRARY_LOCATION="/Users/Shared/Music/"
	else
		export MUSIC_LIBRARY_LOCATION="${HOME:-/Users/Shared}/Music/Music/"
	fi
fi

export ZERO_UUID="00000000-0000-0000-0000-000000000000"

export CURRENT_DATE_TIME=$(date -j "+%Y-%m-%d %H:%M:00 +0800")
export CURRENT_SECONDS=$(date -j "+%s")


declare -i MAX_DOWNLOAD_CONNECTIONS=5
OS_VERSION=$(sw_vers -productVersion)
OS_VERSION_MAJOR=$(echo $OS_VERSION | cut -d. -f 1-2 )


# OPTION FLAGS
# Uncomment an option to override user settings and defaults

# Developer mode
#export USE_DEVELOPER_SETUP="YES"
export USE_DEBUG_MODE="${USE_DEBUG_MODE:-NO}" ;


# Graphics mode
# (USE "NO" if you're on an older Mac that messes up the animation)
#export USE_FANCY_GRAPHICS="NO"
#export USE_BLUETOOTH="YES"

# DO NOT CHANGE THIS

# automatically configure iCloud values
if [[ ( $(defaults export MobileMeAccounts - | grep -A5 -F AccountDSID | grep -coiF "iCloud" ) -eq 1 ) ]] ||\
[[ ($HAS_CLOUD_ID == "YES") ]] ; then
	export CLOUD_ID=$(defaults find AccountDSID | grep -F AccountDSID | grep -oE '^\s*[A]{1}[c]{2}[o]{1}.*' | head -n 1 | tr -d '; ' | cut -d\= -f 2)
	export CLOUD_UUID=$(defaults find AccountDSID | grep -F AccountUUID | grep -oE '^\s*[A]{1}[c]{2}[o]{1}.*' | head -n 1 | tr -d '\"; ' | cut -d\= -f 2)
	export CLOUD_UN=$(defaults find AccountDSID | grep -F DisplayName | head -n 1 | tr -d ';' | cut -d\= -f 2 | grep -oE "\".+\"" | tr -d '"')
	export AUTHOR_NAME="${CLOUD_UN:-${LOGNAME}}"
	export CLOUD_EMAIL=$(defaults find AccountDSID | grep -F AccountID | grep -oE '^\s*[A]{1}[c]{2}[o]{1}.*' | head -n 1 | tr -d '\"; ' | cut -d\= -f 2)
	export HAS_CLOUD_ID="YES"
else
	# (sign in in system prefs to appleID instead.)
	export HAS_CLOUD_ID="NO"
	export AUTHOR_NAME="${LOGNAME:-Unknown}"
	export -n CLOUD_EMAIL ;
	export CLOUD_UUID=${CLOUD_UUID:-$ZERO_UUID}
fi


# these keys need to be stored and retrieved with security -key commands
#CAL_UUID=""
#FACETIME_MESSAGES_ID=""
#MESSAGES_ID=""

export HW_UUID=$(system_profiler -json SPHardwareDataType | grep -F "platform_UUID" | cut -d: -f 2 | tr -d '" ,')
export TOKEN_ID=$(defaults read com.apple.findmy.fmfcore.notbackedup publicAPSToken 2>/dev/null)

#-----------------------------------------------------------#
# All other UUIDs only appear once,                         #
# you will need to change these manually.                   #
#-----------------------------------------------------------#

#-----------------------------------------------------------#
# Functions                                                 #
#-----------------------------------------------------------#

function WRITE() {
	DEFAULTS=$(command -v defaults)
	echo "Configuring ${1} ${2:-}" ;
	if [[ ("${USE_DEVELOPER_SETUP}" == "YES") ]] ; then
		echo "    Will use key \"${2:-'<empty>'}\" " ;
		echo "    Will use type \"${3:-data}\" " ;
	fi
	if [[ ( $(echo "-"$(${DEFAULTS} read-type "${1}" "${2:-}" 2>/dev/null | cut -d\  -f 3 | sed -Ee 's/integer/int/g' | sed -Ee 's/dictionary/dict/g' | sed -Ee 's/boolean/bool/g' )) == $(echo "${3:-data}" | sed -Ee 's/-add//g') ) ]] ; then
		${DEFAULTS} write "${1}" "${2:-}" "${@:3:$#}" || echo "args: \"${2:-}\" \"${@:3:$#}\"" ;
	else
		echo "    Should use type \"-"$(${DEFAULTS} read-type "${1}" "${2:-}" 2>/dev/null | cut -d\  -f 3 | sed -Ee 's/integer/int/g' | sed -Ee 's/dictionary/dict/g' | sed -Ee 's/boolean/bool/g')"\""
		if [[ ("${USE_DEVELOPER_SETUP}" == "YES") ]] ; then
			echo "    DEVELOPER OVERRIDE  (Admin Help You, You'll NEED it to recover!)" ;
			${DEFAULTS} write "${1}" "${2:-}" "${@:3:$#}" || echo "args: \"${2:-}\" \"${@:3:$#}\"" ;
			echo "    " ;
		else
			echo "    SKIPPING INSTEAD (safety)" ;
		fi ;
	fi ;
	return $? ;
}

function DISABLE() {
	DEFAULTS=$(command -v defaults)
	if [[ ( $(${DEFAULTS} read "${1}" "${@:2:$#}" 2>/dev/null) -ne 0 ) ]] ; then
		echo "Disabling ${1} ${@:2:$#}" ;
		${DEFAULTS} write "${1}" "${@:2:$#}" -bool NO ;
	else
		echo "Skipping ${1} ${@:2:$#} as it is already disabled" ;
	fi
	if [[ ( $(${DEFAULTS} read "${1}" "${@:2:$#}" 2>/dev/null) -eq 0 ) ]] ; then
		return 0 ;
	else
		echo "Error ${1} ${@:2:$#} is still NOT enabled" >&2 && false;
		return 255 ;
	fi
}

function ENABLE() {
	DEFAULTS=$(command -v defaults)
	if [[ ( $(${DEFAULTS} read "${1}" "${@:2:$#}" 2>/dev/null ) -eq 0 ) ]] ; then
		echo "Enabling ${1} ${@:2:$#}" ;
		${DEFAULTS} write "${1}" "${@:2:$#}" -bool YES ;
	else
		echo "Skipping ${1} ${@:2:$#} as it is already enabled" ;
	fi
	if [[ ( $(${DEFAULTS} read "${1}" "${@:2:$#}" 2>/dev/null) -eq 1 ) ]] ; then
		return 0 ;
	else
		echo "Error ${1} ${@:2:$#} is still NOT enabled" >&2 && false;
		return 255 ;
	fi
}

function DELETE() {
	DEFAULTS=$(command -v defaults)
	if [[ ( $(${DEFAULTS} read "${1}" "${@:2:$#}" 2>/dev/null | wc -l) -gt 0 ) ]] ; then
		echo "Deleting ${1} ${@:2:$#}" ;
		${DEFAULTS} delete "${1}" "${@:2:$#}" || echo "Error delete failed" >&2 ;
	else
		echo "Skipping ${1} ${@:2:$#} as there is nothing to delete" ;
	fi
	if [[ ( $(${DEFAULTS} read "${1}" "${@:2:$#}" 2>/dev/null | wc -l) -lt 1 ) ]] ; then
		return 0 ;
	else
		echo "Error ${1} ${@:2:$#} is still NOT deleted" >&2 && false;
		return 255 ;
	fi
}

function ENFORCE_GRAPHICS_MODE() {
	LAST_ARG=$(($#-1))
	if [[ ("${USE_FANCY_GRAPHICS}" == "YES") ]] ; then
		echo "Optimizing for fancy graphics enabled"
		if [[ ( "${@:$#:$#}" == "YES" ) ]] ; then
			ENABLE "${@:1:$LAST_ARG}"
		else
			DISABLE "${@:1:$LAST_ARG}"
		fi
	else
		echo "Optimizing for faster graphics response"
		if [[ ( "${@:$#:$#}" == "YES" ) ]] ; then
			DISABLE "${@:1:$LAST_ARG}"
		else
			ENABLE "${@:1:$LAST_ARG}"
		fi
	fi
	return $? ; # might not return the right code (might return result of if instead)
}

function ENFORCE_DEV_MODE() {
	LAST_ARG=$(($#-1))
	if [[ ("${USE_DEVELOPER_SETUP}" == "YES") ]] ; then
		echo "Optimizing for developer user"
		if [[ ( "${@:$#:$#}" == "YES" ) ]] ; then
			ENABLE "${@:1:$LAST_ARG}"
		else
			DISABLE "${@:1:$LAST_ARG}"
		fi
	else
		echo "Optimizing for normal user"
		if [[ ( "${@:$#:$#}" == "YES" ) ]] ; then
			DISABLE "${@:1:$LAST_ARG}"
		else
			ENABLE "${@:1:$LAST_ARG}"
		fi
	fi
	return $? ; # might not return the right code (might return result of if instead)
}

function ENFORCE_DEBUG_MODE() {
	if [[ ("${USE_DEBUG_MODE}" == "YES") ]] ; then
		echo "Optimizing Debug-Mode for developer user" ;
		if [[ ( "${USE_DEVELOPER_SETUP}" == "YES" ) ]] ; then
			ENABLE "${@:1:$#}"
		else
			echo "    Except you are NOT a developer user!" >&2 ;
			echo "    Optimizing run-mode for normal user INSTEAD (safety)" ;
			DISABLE "${@:1:$#}" ;
		fi
	else
		echo "Optimizing run-mode for normal user"
		DISABLE "${@:1:$#}"
	fi
	return $? ; # might not return the right code (might return result of if instead)
}

MKDIR="$(command -v mkdir) -m 755"
PPDOM="com.apple"
GPDOM="com.google"

if [[ ( -r "${HOME}/.UserPreferences" ) ]] ; then
## WILL ADD USER PREFS HERE
# load user variables (IGNORES SHELL COMMANDS)
	export -f WRITE
	export -f DELETE
	export -f ENABLE
	export -f DISABLE
	export -f ENFORCE_GRAPHICS_MODE
	export -f ENFORCE_DEV_MODE
	source <(grep -oE "^(?:\s*)?[-0-9A-Z_]+[=]{1}.+$" "${HOME}/.UserPreferences" | sed -Ee 's/^[[:space:]]+//g' | grep -ovE "^WRITE" | grep -ovE "^DEFAULTS") || true
	# loads ALLOWED user SETTINGS (IGNORES OTHER SHELL COMMANDS)
	echo "dev mode is set to ${USE_DEVELOPER_SETUP}"
	echo "Debug mode is set to ${USE_DEBUG_MODE:-unset}"
	export USE_DEVELOPER_SETUP="${USE_DEVELOPER_SETUP:-NO}" ;
	export USE_DEBUG_MODE="${USE_DEBUG_MODE:-NO}" ;
	export CAL_UUID="${CAL_UUID:-${ZERO_UUID}}" ;
	export USE_FANCY_GRAPHICS="${USE_FANCY_GRAPHICS:-NO}" ;
	export USE_BLUETOOTH="${USE_BLUETOOTH:-YES}" ;
	source <(grep -oE "^(?:\s*)?(?:DELETE){1}(?:\s*)+.+$" "${HOME}/.UserPreferences" | sed -Ee 's/^[[:space:]]+//g') || true
	source <(grep -oE "^(?:\s*)?(?:ENABLE){1}(?:\s*)+.+$" "${HOME}/.UserPreferences" | sed -Ee 's/^[[:space:]]+//g') || true
	source <(grep -oE "^(?:\s*)?(?:DISABLE){1}(?:\s*)+.+$" "${HOME}/.UserPreferences" | sed -Ee 's/^[[:space:]]+//g') || true
	source <(grep -oE "^(?:\s*)?(?:WRITE){1}(?:\s*)+.+$" "${HOME}/.UserPreferences" | sed -Ee 's/^[[:space:]]+//g') || true
	source <(grep -oE "^(?:\s*)?(?:ENFORCE_GRAPHICS_MODE){1}(?:\s*)+.+$" "${HOME}/.UserPreferences" | sed -Ee 's/^[[:space:]]+//g') || true
	source <(grep -oE "^(?:\s*)?(?:ENFORCE_DEV_MODE){1}(?:\s*)+.+$" "${HOME}/.UserPreferences" | sed -Ee 's/^[[:space:]]+//g') || true
else
	export USE_DEVELOPER_SETUP="${USE_DEVELOPER_SETUP:-NO}" ;
	export USE_FANCY_GRAPHICS="${USE_FANCY_GRAPHICS:-NO}" ;
	export USE_BLUETOOTH="${USE_BLUETOOTH:-YES}" ;
fi

#-----------------------------------------------------------#
# To Be Deleted                                             #
#-----------------------------------------------------------#

for BAD_DOMAIN in AppleMediaServices DiskUtility EmojiCache UIKit avfoundation.frecents audio.AudioMIDISetup bookstoreagent stockholm stocks stocks.account macos.classroom garageband10 Messages imessage EmojiPreferences PTPCamera Preview.ImageSizingPresets Preview.ViewState proactive.PersonalizationPortrait registration MobileDeviceCrashCopy dockfixup ids.deviceproperties internal.ck studentd ScriptEditor2 ; do

	DELETE ${PPDOM}.${BAD_DOMAIN} 2>/dev/null || true

done ;

#-----------------------------------------------------------#
# Deletion Probation                                        #
#-----------------------------------------------------------#

DELETE org.gpgtools.gpgmail 2>/dev/null || true

# the whole domain of pbs might not be needed
DELETE pbs 2>/dev/null || true

# the next one is a STRANGE NAME with an empty dot at the end
DELETE com.sonorissoftware. 2>/dev/null || true

DELETE com.apple.imservice.ids.iMessage 2>/dev/null || true

#-----------------------------------------------------------#
# AppStore                                                  #
#-----------------------------------------------------------#

for SOME_DOMAIN in AppStore appstore ; do

	for DISABLE_KEY in UserSetAutoPlayVideoSetting NSQuitAlwaysKeepsWindows ; do
		DISABLE ${PPDOM}.${SOME_DOMAIN} ${DISABLE_KEY}
	done ;

	# WARNING: This section is required as is. DO NOT MODIFY.
	#Some users might want these two disabled
	for DEV_KEY in WebKitDeveloperExtras ; do
		ENFORCE_DEV_MODE ${PPDOM}.${SOME_DOMAIN} ${DEV_KEY} YES
	done ;
	for DEBUG_KEY in ShowDebugMenu ; do
		ENFORCE_DEBUG_MODE ${PPDOM}.${SOME_DOMAIN} ${DEBUG_KEY}
	done ;

	WRITE ${PPDOM}.${SOME_DOMAIN} AutoPlayVideoSetting -string off

	WRITE ${PPDOM}.${SOME_DOMAIN} lastBootstrapTimeZone -string "${TZ}"
	WRITE ${PPDOM}.${SOME_DOMAIN} NSNavLastRootDirectory -string "${DEFAULT_SAVE_LOCATION}"
	WRITE ${PPDOM}.${SOME_DOMAIN} mostRecentTabIdentifier -string updates
	WRITE ${PPDOM}.${SOME_DOMAIN} lastBootstrapDate -float "${CURRENT_SECONDS}"
	DELETE ${PPDOM}.${SOME_DOMAIN} "MetricsSamplingLotteryWindowStart_pageRender" 2>/dev/null || true

done ;

#-----------------------------------------------------------#
# commerce                                                  #
#-----------------------------------------------------------#

DISABLE ${PPDOM}.commerce AutoUpdate

#-----------------------------------------------------------#
# SoftwareUpdate                                            #
#-----------------------------------------------------------#

# WARNING: This setting is required as is. DO NOT MODIFY.
ENABLE ${PPDOM}.SoftwareUpdate AutomaticCheckEnabled

# WARNING: This setting is required as is. DO NOT MODIFY.
# Check for software updates daily, not just once per week
WRITE ${PPDOM}.SoftwareUpdate ScheduleFrequency -int 1

# WARNING: This setting is required as is. DO NOT MODIFY.
# Install System data files & security updates
WRITE ${PPDOM}.SoftwareUpdate CriticalUpdateInstall -int 1

# WARNING: This setting is required as is. DO NOT MODIFY.
# Download newly available updates in background
WRITE com.apple.SoftwareUpdate AutomaticDownload -int 1

# WARNING: This setting is required as is. DO NOT MODIFY.
# Disable Automatically download apps purchased on other Macs
WRITE ${PPDOM}.SoftwareUpdate ConfigDataInstall -int 0

# Turn on app auto-update
ENABLE ${PPDOM}.commerce AutoUpdate

# Allow the App Store to reboot machine on macOS updates
ENFORCE_DEV_MODE ${PPDOM}.commerce AutoUpdateRestartRequired NO

(softwareupdate --list 2>/dev/null || true ) &

#-----------------------------------------------------------#
# NSGlobalDomain + Apple Global Domain                      #
#-----------------------------------------------------------#

# Set language and text formats

for SOME_DOMAIN in NSGlobalDomain "Apple Global Domain" ; do
	# Automatic show scrollbars
	WRITE "${SOME_DOMAIN}" AppleShowScrollBars -string "Automatic"
	# Possible values: `WhenScrolling`, `Automatic` and `Always`

	WRITE "${SOME_DOMAIN}" NSTableViewDefaultSizeMode -int 2

	if [[ ("${USE_DEVELOPER_SETUP}" == "YES") ]] ; then
		# Increase window resize speed for Cocoa applications
		WRITE "${SOME_DOMAIN}" NSWindowResizeTime -float 0.001
		WRITE "${SOME_DOMAIN}" AppleAccentColor -int 3
		WRITE "${SOME_DOMAIN}" AppleHighlightColor -string "0.752941 0.964706 0.678431 Green"
		DELETE "${SOME_DOMAIN}" AppleInterfaceStyleSwitchesAutomatically 2>/dev/null || true
		WRITE "${SOME_DOMAIN}" AppleInterfaceStyle -string "Dark"

		# Set a blazingly fast keyboard repeat rate
		WRITE "${SOME_DOMAIN}" KeyRepeat -int 1
		WRITE "${SOME_DOMAIN}" InitialKeyRepeat -int 10
	else
		WRITE "${SOME_DOMAIN}" AppleAccentColor -int 2
		WRITE "${SOME_DOMAIN}" AppleHighlightColor -string "1.000000 0.874510 0.701961 Orange"
		if [[ ("${USE_FANCY_GRAPHICS}" == "YES") ]] ; then
			# Allow window resize animation for Cocoa applications
			DELETE "${SOME_DOMAIN}" NSWindowResizeTime 2>/dev/null || true
			DELETE "${SOME_DOMAIN}" AppleInterfaceStyle 2>/dev/null || true
			ENABLE "${SOME_DOMAIN}" AppleInterfaceStyleSwitchesAutomatically

			# Set a 'normal' fast (max by gui) keyboard repeat rate
			WRITE "${SOME_DOMAIN}" KeyRepeat -int 2
			WRITE "${SOME_DOMAIN}" InitialKeyRepeat -int 15
			DELETE "${SOME_DOMAIN}" com.apple.springing.delay
		else
			WRITE "${SOME_DOMAIN}" NSWindowResizeTime -float 0.01
			DELETE "${SOME_DOMAIN}" AppleInterfaceStyleSwitchesAutomatically 2>/dev/null || true
			WRITE "${SOME_DOMAIN}" AppleInterfaceStyle -string "Light"
			# Set a fast keyboard repeat rate
			WRITE "${SOME_DOMAIN}" KeyRepeat -int 1
			WRITE "${SOME_DOMAIN}" InitialKeyRepeat -int 12
			WRITE "${SOME_DOMAIN}" com.apple.springing.delay -float 0
		fi
	fi

	# WARNING: The setting for AppleShowAllExtensions is required as is. DO NOT MODIFY.
	# Expand save panel by default
	# Expand print panel by default
	for ENABLE_KEY in NSNavPanelExpandedStateForSaveMode NSNavPanelExpandedStateForSaveMode2 PMPrintingExpandedStateForPrint PMPrintingExpandedStateForPrint2 AppleShowAllExtensions ; do
		ENABLE "${SOME_DOMAIN}" ${ENABLE_KEY}
	done ;

	# WARNING: This setting for com.apple.swipescrolldirection and AppleMetricUnits is required as is. DO NOT MODIFY.
	# Disable smart quotes as they’re annoying when typing code
	# Disable auto-correct
	# Disable "Natural" (Lion-Style) Scrolling
	for DISABLE_KEY in NSDocumentSaveNewDocumentsToCloud NSAutomaticCapitalizationEnabled NSAutomaticDashSubstitutionEnabled NSAutomaticPeriodSubstitutionEnabled NSAutomaticQuoteSubstitutionEnabled NSAutomaticSpellingCorrectionEnabled com.apple.swipescrolldirection AppleMetricUnits ; do
		DISABLE "${SOME_DOMAIN}" ${DISABLE_KEY}
	done ;

	# WARNING: This setting is required as is. DO NOT MODIFY.
	WRITE "${SOME_DOMAIN}" RetriesUntilHint -int 0
	WRITE "${SOME_DOMAIN}" com.apple.mouse.tapBehavior -int 0
	# WARNING: This setting is required as is. DO NOT MODIFY.
	ENABLE "${SOME_DOMAIN}" com.apple.trackpad.enableSecondaryClick

	WRITE "${SOME_DOMAIN}" AppleLanguages -array "${LANG}" "${LANG:0:2}"
	WRITE "${SOME_DOMAIN}" NSLinguisticDataAssetsRequested -array "${LANG}" "${LANG:0:2}"
	WRITE "${SOME_DOMAIN}" NSLinguisticDataAssetsRequestTime -date "${CURRENT_DATE_TIME}"
	WRITE "${SOME_DOMAIN}" AppleLocale -string "${LANG}"

	# WARNING: This setting is required as is. DO NOT MODIFY.
	WRITE "${SOME_DOMAIN}" AppleMeasurementUnits -string "Inches"
	WRITE "${SOME_DOMAIN}" AppleTemperatureUnit -string "Fahrenheit"

	# Enable subpixel font rendering on non-Apple LCDs (requires restart)
	# Reference: https://github.com/kevinSuttle/macOS-Defaults/issues/17#issuecomment-266633501
	# for true-tone Retnia display use 4 (to prevent flickering)
	WRITE "${SOME_DOMAIN}" AppleFontSmoothing -int 4

	# WARNING: This setting for com.apple.springing.enabled is required as is. DO NOT MODIFY.
	# Allow the over-the-top focus ring animation when using fancy graphics
	# Allow smooth scrolling
	# Enable spring loading for directories
	for DEV_KEY in com.apple.springing.enabled NSUseAnimatedFocusRing NSScrollAnimationEnabled ; do
		ENFORCE_GRAPHICS_MODE "${SOME_DOMAIN}" ${DEV_KEY} YES
	done ;

	# DEV MODE

	# Disable automatic termination of inactive apps
	#add NSDisableAutomaticTermination to DEV_KEYs

	# WARNING: This setting is required as is. DO NOT MODIFY.
	# Enable full keyboard access for all controls
	# (e.g. enable Tab in modal dialogs)
	#WRITE "${SOME_DOMAIN}" AppleKeyboardUIMode -int 3

	# WARNING: This setting is required as is. DO NOT MODIFY.
	for DEV_KEY in WebKitDeveloperExtras ; do
		ENFORCE_DEV_MODE "${SOME_DOMAIN}" ${DEV_KEY} YES
	done ;

	# WARNING: This setting is required as is. DO NOT MODIFY.
	# Display ASCII control characters using caret notation in standard text views
	# Try e.g. `cd /tmp; unidecode "\x{0000}" > cc.txt; open -e cc.txt`
	for DEV_KEY in NSTextShowsControlCharacters ; do
		ENFORCE_DEBUG_MODE "${SOME_DOMAIN}" ${DEBUG_KEY}
	done ;

	# WARNING: This setting for ApplePressAndHoldEnabled is required as is. DO NOT MODIFY.
	# Disable automatic capitalization as it’s annoying when typing code
	# Disable press-and-hold for keys in favor of key repeat
	for DEV_KEY in NSAutomaticCapitalizationEnabled NSAutomaticDashSubstitutionEnabled NSAutomaticPeriodSubstitutionEnabled ApplePressAndHoldEnabled ; do
		ENFORCE_DEV_MODE "${SOME_DOMAIN}" ${DEV_KEY} NO
	done ;

	# Clean up some

	DELETE "${SOME_DOMAIN}" NSNavRecentPlaces 2>/dev/null || true
done ;

WRITE Apple\ Global\ Domain AppleLanguagesDidMigrate -string "${OS_VERSION}"

#-----------------------------------------------------------#
# Finder                                                    #
#-----------------------------------------------------------#

WRITE ${PPDOM}.finder CopyProgressWindowLocation -string "{127, 127}"

WRITE ${PPDOM}.finder EmptyTrashProgressWindowLocation -string "{256, 127}"

# WARNING: This section is required as is. DO NOT MODIFY.
#Disable warnings
for DEV_KEY in FXEnableExtensionChangeWarning WarnOnEmptyTrash ; do
	ENFORCE_DEV_MODE ${PPDOM}.finder ${DEV_KEY} NO
done ;

# WARNING: This section is required as is. DO NOT MODIFY.
# Finder: show hidden files in Finder by default
for A_DEV_KEY in AppleShowAllFiles ; do
	ENFORCE_DEV_MODE ${PPDOM}.finder ${A_DEV_KEY} YES
done ;

# WARNING: This section is required as is. DO NOT MODIFY.
# Allow window animations and Get Info animations despite graphics mode
DISABLE "${SOME_DOMAIN}" DisableAllAnimations

if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
	ENABLE ${PPDOM}.finder FXICloudLoggedIn
fi

# WARNING: This section is required as is. DO NOT MODIFY.
# Show icons for hard drives, servers, and removable media on the desktop
# show all filename extensions
# show status bar
# show path bar
for ENABLE_KEY in ShowExternalHardDrivesOnDesktop ShowHardDrivesOnDesktop ShowMountedServersOnDesktop ShowRemovableMediaOnDesktop AppleShowAllExtensions ShowStatusBar ShowPathbar _FXShowPosixPathInTitle _FXSortFoldersFirst OpenWindowForNewRemovableDisk ; do
	ENABLE ${PPDOM}.finder ${ENABLE_KEY}
done ;


for DISABLE_KEY in FXICloudDriveDeclinedUpgrade FXICloudDriveDesktop FXICloudDriveDocuments FXICloudDriveEnabled FXICloudDriveFirstSyncDownComplete ; do
	if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
		DISABLE ${PPDOM}.finder ${DISABLE_KEY}
	else
		DELETE ${PPDOM}.finder ${DISABLE_KEY} 2>/dev/null || true
	fi
done ;

# WARNING: This setting is required as is. DO NOT MODIFY.
# When performing a search, search the current folder by default
WRITE com.apple.finder FXDefaultSearchScope -string "SCcf"

# WARNING: This setting is required as is. DO NOT MODIFY.
# Use list view in all Finder windows by default
# Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`
WRITE com.apple.finder FXPreferredViewStyle -string "Nlsv"

for BAD_KEY in TrashViewSettings FXRecentFolders RecentMoveAndCopyDestinations SGTRecentFileSearches "PreferencesWindow.LastSelection" ; do
	DELETE ${PPDOM}.finder ${BAD_KEY} 2>/dev/null || true
done ;

# MESSY FINDER SETTINGS

# Expand the following File Info panes:
# “General”, “Open with”, and “Sharing & Permissions”
WRITE ${PPDOM}.finder FXInfoPanesExpanded -dict \
	Comments -bool YES \
	General -bool YES \
	MetaData -bool YES \
	Name -bool NO \
	OpenWith -bool NO \
	Preview - bool NO \
	Privileges -bool YES


WRITE ${PPDOM}.finder "NSToolbar Configuration Browser" -dict \
	"TB Default Item Identifiers" '( "com.apple.finder.BACK", NSToolbarSpaceItem, "com.apple.finder.PATH", NSToolbarFlexibleSpaceItem, "com.apple.finder.ACTN", NSToolbarFlexibleSpaceItem, "com.apple.finder.SWCH", "com.apple.finder.ARNG", "com.apple.finder.SHAR", NSToolbarFlexibleSpaceItem, "com.apple.finder.INFO", "com.apple.finder.SRCH", "com.apple.finder.EJCT" )' \
	"TB Display Mode" -int 2 \
	"TB Icon Size Mode" -int 1 \
	"TB Is Shown" -bool YES \
	"TB Item Identifiers" '( "com.apple.finder.BACK", NSToolbarSpaceItem, "com.apple.finder.PATH", NSToolbarFlexibleSpaceItem, "com.apple.finder.ACTN", NSToolbarFlexibleSpaceItem, "com.apple.finder.SWCH", "com.apple.finder.ARNG", "com.apple.finder.SHAR", NSToolbarFlexibleSpaceItem, "com.apple.finder.INFO", "com.apple.finder.SRCH", "com.apple.finder.EJCT" )' \
	"TB Size Mode" -int 1


FINDER_PLIST_PATH="${HOME:-"/Users/Shared"}/Library/Preferences/com.apple.finder.plist"

for VIEW_DOMAIN in DesktopViewSettings FK_StandardViewSettings StandardViewSettings ; do

	for VIEW_MODE in "ExtendedListViewSettingsV2:sortColumn" "GalleryViewSettings:arrangeBy" "IconViewSettings:arrangeBy" "ListViewSettings:sortColumn" ; do
		# Enable snap-to-grid for icons on the desktop and in other icon views
		PlistBuddy -c "Set :$VIEW_DOMAIN:$VIEW_MODE kind" "${FINDER_PLIST_PATH}" 2>/dev/null || true ;
	done ;

	for VTEXT_SIZE in "ExtendedListViewSettingsV2:textSize" "GalleryViewSettings:textSize" "IconViewSettings:textSize" "ListViewSettings:textSize" ; do
		PlistBuddy -c "Set :$VIEW_DOMAIN:$VTEXT_SIZE 14" "${FINDER_PLIST_PATH}" 2>/dev/null || true ;
	done ;

	PlistBuddy -c "Set :$VIEW_DOMAIN:$IconViewSettings:showItemInfo true" "${FINDER_PLIST_PATH}" 2>/dev/null || true ;

done ;

# WARNING: This section is required as is. DO NOT MODIFY.
# Set Desktop as the default location for new Finder windows
# For other paths, use `PfLo` and `file:///full/path/here/`
# values are "PfLo" and "PfDe"
WRITE ${PPDOM}.finder NewWindowTarget -string "PfLo"
WRITE ${PPDOM}.finder NewWindowTargetPath -string "file://${HOME}/"

#-----------------------------------------------------------#
# CrashReporter                                             #
#-----------------------------------------------------------#

if [[ ("${USE_DEVELOPER_SETUP}" == "NO") ]] ; then
	# Disable the crash reporter
	WRITE ${PPDOM}.CrashReporter DialogType -string "none"
else
	WRITE ${PPDOM}.CrashReporter DialogType -string "full"
fi

#-----------------------------------------------------------#
# DiskUtility                                               #
#-----------------------------------------------------------#

# WARNING: This section is required as is. DO NOT MODIFY.
for ENABLE_KEY in DUDebugMenuEnabled advanced-image-options ; do
	ENFORCE_DEV_MODE ${PPDOM}.DiskUtility ${ENABLE_KEY} YES
done ;

#-----------------------------------------------------------#
# Spotlight                                                 #
#-----------------------------------------------------------#

# WARNING: This section is required as is. DO NOT MODIFY.
WRITE ${PPDOM}.Spotlight orderedItems -array \
	'{"enabled" = 1;"name" = "APPLICATIONS";}' \
	'{"enabled" = 1;"name" = "SYSTEM_PREFS";}' \
	'{"enabled" = 1;"name" = "DIRECTORIES";}' \
	'{"enabled" = 1;"name" = "PDF";}' \
	'{"enabled" = 1;"name" = "FONTS";}' \
	'{"enabled" = 1;"name" = "DOCUMENTS";}' \
	'{"enabled" = 0;"name" = "MESSAGES";}' \
	'{"enabled" = 0;"name" = "CONTACT";}' \
	'{"enabled" = 0;"name" = "EVENT_TODO";}' \
	'{"enabled" = 1;"name" = "IMAGES";}' \
	'{"enabled" = 0;"name" = "BOOKMARKS";}' \
	'{"enabled" = 0;"name" = "MUSIC";}' \
	'{"enabled" = 0;"name" = "MOVIES";}' \
	'{"enabled" = 0;"name" = "PRESENTATIONS";}' \
	'{"enabled" = 0;"name" = "SPREADSHEETS";}' \
	'{"enabled" = 0;"name" = "SOURCE";}' \
	'{"enabled" = 1;"name" = "MENU_DEFINITION";}' \
	'{"enabled" = 0;"name" = "MENU_OTHER";}' \
	'{"enabled" = 0;"name" = "MENU_CONVERSION";}' \
	'{"enabled" = 1;"name" = "MENU_EXPRESSION";}' \
	'{"enabled" = 0;"name" = "MENU_WEBSEARCH";}' \
	'{"enabled" = 0;"name" = "MENU_SPOTLIGHT_SUGGESTIONS";}'

#-----------------------------------------------------------#
# corespotlightui                                           #
#-----------------------------------------------------------#

DELETE ${PPDOM}.corespotlightui 2>/dev/null || true
WRITE ${PPDOM}.corespotlightui CSReceiverBundleIdentifierState -dict\
	com.apple.CloudDocs.MobileDocumentsFileProvider -bool YES\
	com.apple.Notes -bool YES\
	com.apple.Safari -bool YES\
	com.apple.fileprovider.fileproviderd -bool YES\
	com.apple.iCal -bool YES\
	com.apple.reminders -bool YES ;

# Load new settings before rebuilding the index
killall mds 2>/dev/null || true

#-----------------------------------------------------------#
# Bluetooth Security Settings from .macrc                   #
#-----------------------------------------------------------#

# Disables the sending of diagnostic data to Apple
DISABLE ~/Library/Preferences/ByHost/com.apple.SubmitDiagInfo.$HW_UUID AutoSubmit

if [[ ($USE_BLUETOOTH == "NO") ]] ; then
	# Forbid Bluetooth devices to wake the computer
	DISABLE ~/Library/Preferences/ByHost/com.apple.Bluetooth.$HW_UUID RemoteWakeEnabled
else
	ENABLE ~/Library/Preferences/ByHost/com.apple.Bluetooth.$HW_UUID RemoteWakeEnabled
	# Increase sound quality for Bluetooth headphones/headsets
	WRITE com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 32
fi


#-----------------------------------------------------------#
# security.cloudkeychainproxy3.keysToRegister               #
#-----------------------------------------------------------#

# iCloud 2FA settings

if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
	WRITE ${PPDOM}.security.cloudkeychainproxy3.keysToRegister DSID -string ${CLOUD_ID}
	ENABLE ${PPDOM}.security.cloudkeychainproxy3.keysToRegister EnsurePeerRegistration
else
	DISABLE ${PPDOM}.security.cloudkeychainproxy3.keysToRegister EnsurePeerRegistration
fi

# DANGER: these can lock you out of your accounts if altered
#for ARRAY_KEY in FirstUnlockKeys PendingKeys SyncBackupPeerIDs SyncPeerIDs UnlockedKeys ; #do
#	WRITE ${PPDOM}.security.cloudkeychainproxy3.keysToRegister ${ARRAY_KEY} -array
#done ;

#-----------------------------------------------------------#
# systemuiserver                                            #
#-----------------------------------------------------------#

for ENABLE_KEY in Siri com.apple.menuextra.TimeMachine com.apple.menuextra.airport com.apple.menuextra.appleuser com.apple.menuextra.battery com.apple.menuextra.bluetooth com.apple.menuextra.clock com.apple.menuextra.volume com.apple.menuextra.displays ; do
	ENABLE ${PPDOM}.systemuiserver "NSStatusItem Visible ${ENABLE_KEY}"
done ;

DISABLE ${PPDOM}.systemuiserver "NSStatusItem Visible Siri"

WRITE ${PPDOM}.systemuiserver "last-analytics-stamp" -float ${CURRENT_SECONDS}

MENU_EXTRA_PATH="/System/Library/CoreServices/Menu Extras"

WRITE ${PPDOM}.systemuiserver menuExtras -array "${MENU_EXTRA_PATH}/User.menu" "${MENU_EXTRA_PATH}/Clock.menu" "${MENU_EXTRA_PATH}/Battery.menu" "${MENU_EXTRA_PATH}/Volume.menu" "${MENU_EXTRA_PATH}/AirPort.menu" "${MENU_EXTRA_PATH}/Bluetooth.menu" "${MENU_EXTRA_PATH}/TimeMachine.menu" "${MENU_EXTRA_PATH}/Displays.menu"

#-----------------------------------------------------------#
# universalaccess                                           #
#-----------------------------------------------------------#

for DISABLE_KEY in closeViewScrollWheelToggle closeViewHotkeysEnabled closeViewZoomDisplayID login ; do
	DISABLE ${PPDOM}.universalaccess ${DISABLE_KEY}
done ;

# Allow transparency in the menu bar and elsewhere on Yosemite when using fancy graphics
ENFORCE_GRAPHICS_MODE ${PPDOM}.universalaccess reduceTransparency NO

ENABLE ${PPDOM}.universalaccess closeViewZoomFactor

#-----------------------------------------------------------#
# frameworks.diskimages                                     #
#-----------------------------------------------------------#

# WARNING: This setting is required as is. DO NOT MODIFY.
DISABLE ${PPDOM}.frameworks.diskimages "skip-verify"

# WARNING: This section is required as is. DO NOT MODIFY.
for ENABLE_KEY in "auto-open-ro-root" "auto-open-rw-root" "skip-verify-locked" "skip-verify-remote" ; do
	ENABLE ${PPDOM}.frameworks.diskimages ${ENABLE_KEY}
done ;

ENFORCE_DEV_MODE ${PPDOM}.frameworks.diskimages OpenWindowForNewRemovableDisk NO

#-----------------------------------------------------------#
# Preferences                                               #
#-----------------------------------------------------------#

WRITE ${PPDOM}.Preferences UserDictionaryImportedSinceMaintenance -int 0

WRITE ${PPDOM}.Preferences UserDictionaryLastMaintenanceDate -date "${CURRENT_DATE_TIME}"

WRITE ${PPDOM}.Preferences UserDictionaryLocalPeerIdentityCurrent -string "${LOGNAME:-${USER}}~${HW_UUID}"

#-----------------------------------------------------------#
# SystemPreferences                                         #
#-----------------------------------------------------------#

if [[ ( -d "${HOME}/Pictures/Wedding Desktops" ) ]] ; then
	WRITE ${PPDOM}.systempreferences DSKDesktopPrefPane -dict UserFolderPaths '("${HOME}/Pictures/Wedding Desktops")'
fi

for STRING_KEY in NSNavLastRootDirectory com.apple.TimeMachine.OpenPanelDirectory ; do
	WRITE ${PPDOM}.systempreferences ${STRING_KEY} -string "${DEFAULT_SAVE_LOCATION}"
done ;

# REQUIRED SECURITY SETTING
# Disable Resume system-wide
DISABLE ${PPDOM}.systempreferences NSQuitAlwaysKeepsWindows

for BAD_KEY in com.apple.dtandsspref.lastselectedtab com.apple.preference.keyboard.lastselectedtab trackpad.lastselectedtab ; do
	DELETE ${PPDOM}.systempreferences ${BAD_KEY} 2>/dev/null || true
done ;

#-----------------------------------------------------------#
# Preferences.Extensions                                    #
#-----------------------------------------------------------#

for SOME_DOMAIN in PhotoEditing PhotoProjects QuickLook XcodeSourceEditor SharedLinks ServicesWithUI ShareMenu ; do
	ENABLE ${PPDOM}.Preferences.Extensions.${SOME_DOMAIN} userHasOrdered
done ;

for SOME_DOMAIN in PhotoProjects SharedLinks XcodeSourceEditor ; do
	WRITE ${PPDOM}.Preferences.Extensions.${SOME_DOMAIN} displayOrder -array
done ;

WRITE ${PPDOM}.Preferences.Extensions.PhotoEditing displayOrder -array "com.apple.MarkupUI.MarkupPhotoExtension"

WRITE ${PPDOM}.Preferences.Extensions.QuickLook displayOrder -array "com.apple.reminders.quicklookextension"

WRITE ${PPDOM}.Preferences.Extensions.ServicesWithUI displayOrder -array "com.apple.MarkupUI.Markup"

WRITE ${PPDOM}.Preferences.Extensions.ShareMenu displayOrder -array "com.apple.Notes.SharingExtension" "com.apple.share.AirDrop.send" "com.apple.share.System.add-to-safari-reading-list" "com.apple.reminders.sharingextension" "com.apple.share.Mail.compose" "com.apple.messages.ShareExtension" "com.apple.share.System.add-to-iphoto" "com.apple.share.CloudSharing.invite" "com.apple.iBooksX.SharingExtension"

#-----------------------------------------------------------#
# preferences.screentime                                    #
#-----------------------------------------------------------#

if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
	ENABLE ${PPDOM}.preferences.screentime HasBeenIntroduced
	WRITE ${PPDOM}.preferences.screentime HasShownCommunicationLimitsCompatibilityAlertByDSID -dict-add ${CLOUD_ID} 1
else
	DISABLE ${PPDOM}.preferences.screentime HasBeenIntroduced
fi
#-----------------------------------------------------------#
# knowledge-agent                                           #
#-----------------------------------------------------------#

DISABLE knowledge-agent ScreenTimeSyncDisabled

#-----------------------------------------------------------#
# Terminal                                                  #
#-----------------------------------------------------------#

# Only use UTF-8 in Terminal.app
# DISABLE “focus follows mouse” for Terminal.app and all X11 apps
# i.e. hover over a window and start typing in it without clicking first
# ensure bash is used (not the zsh junk)
# Enable Secure Keyboard Entry in Terminal.app
# See: https://security.stackexchange.com/a/47786/8918
# Disable the annoying line marks

# WARNING: This setting for StringEncodings, ShowLineMarks and SecureKeyboardEntry is required as is. DO NOT MODIFY.
for SOME_DOMAIN in terminal Terminal ; do
	# Only use UTF-8 in Terminal.app
	WRITE ${PPDOM}.${SOME_DOMAIN} StringEncodings -array 4 30
	WRITE ${PPDOM}.${SOME_DOMAIN} Shell -string $(command -v bash)" -il" ;
	ENABLE ${PPDOM}.${SOME_DOMAIN} SecureKeyboardEntry
	WRITE ${PPDOM}.${SOME_DOMAIN} ShowLineMarks -int 0
	DISABLE ${PPDOM}.${SOME_DOMAIN} FocusFollowsMouse
done ;

#-----------------------------------------------------------#
# X11                                                       #
#-----------------------------------------------------------#

# WARNING: This setting is required as is. DO NOT MODIFY.
# disable remote X11 socket
ENABLE org.x.X11 nolisten_tcp

DELETE org.x.X11 wm_ffm 2>/dev/null || true

#-----------------------------------------------------------#
# ActivityMonitor                                           #
#-----------------------------------------------------------#

# WARNING: This setting is required as is. DO NOT MODIFY.
# Show the main window when launching Activity Monitor
ENABLE ${PPDOM}.ActivityMonitor OpenMainWindow

WRITE ${PPDOM}.ActivityMonitor ShowCategory -int 0

if [[ ("${USE_FANCY_GRAPHICS}" == "YES") ]] ; then
	# Visualize CPU usage in the Activity Monitor Dock icon
	WRITE ${PPDOM}.ActivityMonitor IconType -int 5
fi

# WARNING: This setting is required as is. DO NOT MODIFY.
# Show all processes in Activity Monitor
WRITE ${PPDOM}.ActivityMonitor ShowCategory -int 0

# WARNING: This section is required as is. DO NOT MODIFY.
# Sort Activity Monitor results by CPU usage
WRITE ${PPDOM}.ActivityMonitor SortColumn -string "CPUUsage"
WRITE ${PPDOM}.ActivityMonitor SortDirection -int 0

#-----------------------------------------------------------#
# AdLib                                                     #
#-----------------------------------------------------------#

#ensures only one key
DELETE ${PPDOM}.AdLib 2>/dev/null || true
ENABLE ${PPDOM}.AdLib forceLimitAdTracking

#-----------------------------------------------------------#
# AdGuard                                                   #
#-----------------------------------------------------------#

WRITE com.adguard.safari.AdGuard NSTreatUnknownArgumentsAsOpen -string NO

#-----------------------------------------------------------#
# NetworkBrowser                                            #
#-----------------------------------------------------------#

# WARNING: This section is required as is. DO NOT MODIFY.
# Enable AirDrop over Ethernet and on unsupported Macs running Lion
for ENABLE_KEY in BrowseAllInterfaces ; do
	ENABLE ${PPDOM}.NetworkBrowser ${ENABLE_KEY}
done ;

if [[ ("${USE_BLUETOOTH}" == "YES") ]] ; then
	for DISABLE_KEY in DisableAirDrop ; do
		DISABLE ${PPDOM}.NetworkBrowser ${DISABLE_KEY}
	done ;
else
	for ENABLE_KEY in DisableAirDrop ; do
		ENABLE ${PPDOM}.NetworkBrowser ${ENABLE_KEY}
	done ;
fi

#-----------------------------------------------------------#
# Safari                                                    #
#-----------------------------------------------------------#

#General/Security

# WARNING: This section except for ExcludePrivateWindowWhenRestoringSessionAtLaunch, LocalFileRestrictionsEnabled, and OpenPrivateWindowWhenNotRestoringSessionAtLaunch is required as is. DO NOT MODIFY.
for ENABLE_KEY in AskBeforeSubmittingInsecureForms ExcludePrivateWindowWhenRestoringSessionAtLaunch LocalFileRestrictionsEnabled OpenPrivateWindowWhenNotRestoringSessionAtLaunch SendDoNotTrackHTTPHeader SuppressSearchSuggestions TreatSHA1CertificatesAsInsecure WarnAboutFraudulentWebsites WebContinuousSpellCheckingEnabled InstallExtensionUpdatesAutomatically ; do
	ENABLE ${PPDOM}.Safari ${ENABLE_KEY}
done ;

# WARNING: This section except for AlwaysRestoreSessionAtLaunch, CanPromptForPushNotifications, PreloadTopHit, and ShowFavoritesUnderSmartSearchField is required as is. DO NOT MODIFY.
for DISABLE_KEY in AlwaysRestoreSessionAtLaunch AutoFillCreditCardData AutoFillFromAddressBook AutoFillMiscellaneousForms AutoFillPasswords AutoOpenSafeDownloads CanPromptForPushNotifications PreloadTopHit ShowFavoritesBar ShowFavoritesUnderSmartSearchField WebAutomaticSpellingCorrectionEnabled UniversalSearchEnabled ShowSidebarInTopSites ; do
	DISABLE ${PPDOM}.Safari ${DISABLE_KEY}
done ;

# WARNING: This section except for IncludeInternalDebugMenu is required as is. DO NOT MODIFY.
for ENABLE_KEY in IncludeDevelopMenu ShowFullURLInSmartSearchField ; do
	ENFORCE_DEV_MODE ${PPDOM}.Safari ${ENABLE_KEY} YES
done ;

for ENABLE_DEBUG_KEY in IncludeInternalDebugMenu WebKitDeveloperExtrasEnabledPreferenceKey com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled ; do
	ENFORCE_DEBUG_MODE ${PPDOM}.Safari ${ENABLE_DEBUG_KEY}
done ;

# WARNING: This setting is required as is. DO NOT MODIFY.
ENFORCE_DEV_MODE ${PPDOM}.Safari FindOnPageMatchesWordStartsOnly NO

#WebKits

# WARNING: This section except for com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled is required as is. DO NOT MODIFY.
for ENABLE_KEY in WebKitTabToLinksPreferenceKey com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled ; do
	ENABLE ${PPDOM}.Safari ${ENABLE_KEY}
done ;

# WARNING: This section is required as is. DO NOT MODIFY.
for DISABLE_KEY in WebKitPluginsEnabled com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled WebKitJavaEnabled com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled WebKitJavaScriptCanOpenWindowsAutomatically com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically ; do
	DISABLE ${PPDOM}.Safari ${DISABLE_KEY}
done ;

# WARNING: This section is required as is. DO NOT MODIFY.
for SOME_DOMAIN in Safari SafariTechnologyPreview ; do

	for DISABLE_KEY in WebKitMediaPlaybackAllowsInline com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback ; do
		DISABLE ${PPDOM}.${SOME_DOMAIN} ${DISABLE_KEY}
	done ;
done ;

for INT_KEY in NewTabBehavior NewWindowBehavior ; do
	WRITE ${PPDOM}.Safari ${INT_KEY} -int 1
done ;

for ARRAY_KEY in OpenWindows ProxiesInBookmarksBar RecentWebSearches ; do
	WRITE ${PPDOM}.Safari ${ARRAY_KEY} -array
done ;

WRITE ${PPDOM}.Safari LastOSVersionSafariWasLaunchedOn -string "${OS_VERSION}"

WRITE ${PPDOM}.Safari NSNavLastRootDirectory -string "~/Downloads"

WRITE ${PPDOM}.Safari HomePage -string "https://duckduckgo.com/?kn=1&k1=-1&kap=-1&kaq=-1&kax=-1&kak=-1&kt=Tuffy&kae=d&kw=s&k7=3e3e3e&kj=1e1e1e&k9=ffffff"

WRITE ${PPDOM}.Safari SearchProviderIdentifier -string "com.duckduckgo"

WRITE ${PPDOM}.Safari HistoryAgeInDaysLimit -int 8

# WARNING: This setting is required as is. DO NOT MODIFY.
# Disable Safari’s thumbnail cache for History and Top Sites
# WRITE com.apple.Safari DebugSnapshotsUpdatePolicy -int 2

#Some users want this setting
#DELETE ${PPDOM}.Safari IncludeInternalDebugMenu 2>/dev/null || true

#-----------------------------------------------------------#
# SafariBookmarksSyncAgent                                  #
#-----------------------------------------------------------#

#-----------------------------------------------------------#
# AppStoreDamon                                             #
#-----------------------------------------------------------#

if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
WRITE ${PPDOM}.appstored ArcadeDeviceGUID -string ${CLOUD_ID}
fi
WRITE ${PPDOM}.appstored ArcadeDeviceID -string "${ZERO_UUID}"
WRITE ${PPDOM}.appstored ArcadeDeviceIDCreationDate -date "2020-11-11 11:11:11 +0000"
WRITE ${PPDOM}.appstored ArcadePayoutDeviceID -string "${ZERO_UUID}"
WRITE ${PPDOM}.appstored ArcadeSubscriptionState -string Unsubscribed
# this needs to be moved to user prefs
# WRITE ${PPDOM}.appstored WelcomeNotificationLastAppStoreConnectionProductVersion -string "${OS_VERSION}"


#-----------------------------------------------------------#
# Preview                                                   #
#-----------------------------------------------------------#
if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
	WRITE ${PPDOM}.Preview PVGeneralUserName -string "${CLOUD_UN}"
else
	WRITE ${PPDOM}.Preview PVGeneralUserName -string "${USERNAME}"
fi
WRITE ${PPDOM}.Preview kPVPDFDefaultPageViewModeOption -int 0

#-----------------------------------------------------------#
# AddressBook                                               #
#-----------------------------------------------------------#

for SOME_DOMAIN in AddressBook addressbook ; do

	for ENABLE_KEY in ABBirthDayVisible ABJobTitleVisible ABNicknameVisible ABRelatedRecordsVisible ; do
		ENABLE ${PPDOM}.${SOME_DOMAIN} ${ENABLE_KEY}
	done ;

	# WARNING: This setting is required as is. DO NOT MODIFY.
	ENFORCE_DEV_MODE ${PPDOM}.${SOME_DOMAIN} ABShowDebugMenu YES

	WRITE ${PPDOM}.${SOME_DOMAIN} ABInitialLabelsAddress -array $'"_$!<Work>!$_"'
	WRITE ${PPDOM}.${SOME_DOMAIN} ABInitialLabelsEmail -array $'"_$!<Personal>!$_"' $'"_$!<Work>!$_"'
	WRITE ${PPDOM}.${SOME_DOMAIN} ABInitialLabelsPhone -array $'"_$!<Home>!$_"'
	WRITE ${PPDOM}.${SOME_DOMAIN} ABInitialLabelsRelatedRecords -array $'"_$!<Spouse>!$_"'
	WRITE ${PPDOM}.${SOME_DOMAIN} ABInitialLabelsURLs -array $'"_$!<HomePage>!$_"'

	DISABLE ${PPDOM}.${SOME_DOMAIN} ABInstantMessagesVisible
	DELETE ${PPDOM}.${SOME_DOMAIN} "NSSplitView Subview Frames ABCleanWindowController-MainCleanWindow" 2>/dev/null || true
	DELETE ${PPDOM}.${SOME_DOMAIN} ABCleanWindowController-MainCleanWindow-personListController 2>/dev/null || true
	DELETE ${PPDOM}.${SOME_DOMAIN} ABCleanWindowController-MainCleanWindow-groupList 2>/dev/null || true
	DELETE ${PPDOM}.${SOME_DOMAIN} ABSocialProfilesVisible 2>/dev/null || true
done ;

#-----------------------------------------------------------#
# FaceTime                                                  #
#-----------------------------------------------------------#

#WRITE ${PPDOM}.FaceTime CustomRingtone ""

DISABLE ${PPDOM}.FaceTime kPromptEnableReadRecipts

#-----------------------------------------------------------#
# imservice.ids.FaceTime                                    #
#-----------------------------------------------------------#

#if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
#for ARRAY_KEY in ActiveAccounts OnlineAccounts ; do
#	WRITE ${PPDOM}.imservice.ids.FaceTime ${ARRAY_KEY} -array "${FACETIME_MESSAGES_ID}"
#done ;
#fi

#-----------------------------------------------------------#
# imservice.ids.iMessage                                    #
#-----------------------------------------------------------#

#WRITE ${PPDOM}.imservice.ids.iMessage ActiveAccounts -array "${MESSAGES_ID}"

#WRITE ${PPDOM}.imservice.ids.iMessage OnlineAccounts -array "${MESSAGES_ID}"

#-----------------------------------------------------------#
# messages.nicknames                                        #
#-----------------------------------------------------------#

# buggy
#ENABLE ${PPDOM}.messages.nicknames NicknameAppleIDAndiCloudAccountMatchAndExist

#-----------------------------------------------------------#
# sms                                                       #
#-----------------------------------------------------------#

#buggy

#Receive phone texts on this one
# ENABLE ${PPDOM}.sms hasBeenApprovedForSMSRelay

#-----------------------------------------------------------#
# iChat                                                     #
#-----------------------------------------------------------#

#ENABLE ${PPDOM}.iChat NotifyAboutMessagesFromUnknownContacts

#-----------------------------------------------------------#
# iChat.inputLine                                           #
#-----------------------------------------------------------#

WRITE ${PPDOM}.iChat.inputLine inputLineSettingsKey -dict automaticDashSubstitutionEnabled 0 automaticDataDetectionEnabled 0 automaticEmojiSubstitutionEnabled 1 automaticLinkDetectionEnabled 0 automaticQuoteSubstitutionEnabled 0 automaticSpellingCorrectionEnabled 0 automaticTextReplacementEnabled 1 continuousSpellCheckingEnabled 1 grammarCheckingEnabled 0 smartInsertDeleteEnabled 1

#-----------------------------------------------------------#
# commcenter                                                #
#-----------------------------------------------------------#

#WRITE ${PPDOM}.commcenter PersonalitySlots -array ""

#WRITE ${PPDOM}.commcenter PhoneServices -dict Version 1

#-----------------------------------------------------------#
# commcenter.callservices                                   #
#-----------------------------------------------------------#

if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
WRITE ${PPDOM}.commcenter.callservices "last.known.icloud.id" -string $(echo -n "$CLOUD_EMAIL" | openssl dgst -sha1 ) ;
fi

#-----------------------------------------------------------#
# TelephonyUtilities                                        #
#-----------------------------------------------------------#

#recheck on OS updates
if [[ $(echo "$OS_VERSION_MAJOR" == "10.15") ]] ; then
WRITE ${PPDOM}.TelephonyUtilities CachedVCCaps -int 17592188010496
WRITE ${PPDOM}.TelephonyUtilities thumperCallingCapabilitiesStates -array ;
fi;

#-----------------------------------------------------------#
# Signal                                                    #
#-----------------------------------------------------------#

WRITE org.whispersystems.signal-desktop NSNavLastRootDirectory -string "${DEFAULT_SAVE_LOCATION}"


#-----------------------------------------------------------#
# Mail                                                      #
#-----------------------------------------------------------#

# configure send and reply animations in Mail.app
ENFORCE_GRAPHICS_MODE ${PPDOM}.mail DisableReplyAnimations NO
ENFORCE_GRAPHICS_MODE ${PPDOM}.mail DisableSendAnimations NO

# WARNING: This setting is required as is. DO NOT MODIFY.
# Copy email addresses as 'foo@example.com' instead of 'Foo Bar <foo@example.com>' in Mail.app
DISABLE ${PPDOM}.mail AddressesIncludeNameOnPasteboard

# WARNING: This section is required as is. DO NOT MODIFY.
# Display emails in threaded mode, sorted by date (oldest at the top)
WRITE ${PPDOM}.mail DraftsViewerAttributes -dict-add "DisplayInThreadedMode" -string "yes"
WRITE ${PPDOM}.mail DraftsViewerAttributes -dict-add "SortedDescending" -string "yes"
WRITE ${PPDOM}.mail DraftsViewerAttributes -dict-add "SortOrder" -string "received-date"

# WARNING: This setting is required as is. DO NOT MODIFY.
# Disable inline attachments (just show the icons for security)
ENABLE ${PPDOM}.mail DisableInlineAttachmentViewing

# WARNING: This setting is required as is. DO NOT MODIFY.
# Enable automatic spell checking (other options: "NoSpellCheckingEnabled")
WRITE ${PPDOM}.mail SpellCheckingBehavior -string "InlineSpellCheckingEnabled"

# TO REVIEW FOR SECURITY

#-----------------------------------------------------------#
# Mail-Shared                                               #
#-----------------------------------------------------------#

WRITE ${PPDOM}.mail-shared AddressDisplayMode -int 0

ENABLE ${PPDOM}.mail-shared DisableURLLoading

#-----------------------------------------------------------#
# org.gpgtools.gpgmail                                      #
#-----------------------------------------------------------#

WRITE org.gpgtools.gpgmail "savedReport-username" -string "${CLOUD_UN:-${LOGNAME:-${USER}}}"

#-----------------------------------------------------------#
# accountsd                                                 #
#-----------------------------------------------------------#

# TO REVIEW IMPACT
#DELETE ${PPDOM}.accountsd "com.apple.mail.searchableIndex.lastProcessedAttachmentIDKey" 2>/dev/null || true

#-----------------------------------------------------------#
# Calendar                                                  #
#-----------------------------------------------------------#


#WRITE ${PPDOM}.iCal AccountDisplayOrder -array Birthday Local "${CAL_UUID}"

# WARNING: This setting for "TimeZone support enabled" is required as is. DO NOT MODIFY.
for ENABLE_KEY in CalendarSidebarShown OpenEventsInWindowType "TimeZone support enabled" ; do
	ENABLE ${PPDOM}.iCal "${ENABLE_KEY}"
done ;

DISABLE ${PPDOM}.iCal CalDefaultCalendarSelectedByUser

WRITE ${PPDOM}.iCal AllDayAreaHeight -float 62

WRITE ${PPDOM}.iCal BirthdayEventsGenerationLastLocale -string "$LANG"

WRITE ${PPDOM}.iCal CalDefaultPrincipal -string "${CAL_UUID:-Local}"

WRITE ${PPDOM}.iCal CalendarSidebarWidth -float 175

#WRITE ${PPDOM}.iCal CollapsedTopLevelNodes -dict MainWindow ()

#WRITE ${PPDOM}.iCal DelegatesInSeparateWindows -dict iCal {}

#WRITE ${PPDOM}.iCal NSEventConcurrentProcessingEnabled -string YES

# needs testing
DELETE ${PPDOM}.iCal "NSWindow Frame iCal" 2>/dev/null || true

#WRITE ${PPDOM}.iCal "last calendar view description" -string "7-day"

#WRITE ${PPDOM}.iCal "first minute of day time range" -int 0

#WRITE ${PPDOM}.iCal "first minute of work hours" -int 360

#WRITE ${PPDOM}.iCal "last minute of day time range" -int 1440

#WRITE ${PPDOM}.iCal "last minute of work hours" -int 1320

WRITE ${PPDOM}.iCal lastViewsTimeZone -string "${TZ}"

WRITE ${PPDOM}.iCal "number of hours displayed" -int 18

#-----------------------------------------------------------#
# Notes                                                     #
#-----------------------------------------------------------#

DELETE ${PPDOM}.Notes DidChooseToMigrateLocalAccount 2>/dev/null || true

for ENABLE_KEY in ICNoteAddPasswordFirstTimeMessageCompletedKey ICFixUnappliedEncryptedRecordsLaunchTask hasShownWelcomeScreen ; do
	ENABLE ${PPDOM}.Notes ${ENABLE_KEY}
done ;

#-----------------------------------------------------------#
# TextEdit                                                  #
#-----------------------------------------------------------#

WRITE ${PPDOM}.TextEdit NSFont -string LucidaGrande

for SZ_KEY in NSNavPanelExpandedSizeForOpenMode NSNavPanelExpandedSizeForSaveMode ; do
        WRITE ${PPDOM}.TextEdit ${SZ_KEY} -string "{1024, 512}"
done ;

for INT_KEY in NSFontSize ; do
	WRITE ${PPDOM}.TextEdit ${INT_KEY} -int 14
done ;

# WARNING: This setting is required as is. DO NOT MODIFY.
WRITE ${PPDOM}.TextEdit PlainTextEncoding -int 4

# WARNING: This setting is required as is. DO NOT MODIFY.
DISABLE ${PPDOM}.TextEdit RichText

DELETE ${PPDOM}.TextEdit organization 2>/dev/null || true

WRITE ${PPDOM}.TextEdit author -string "${AUTHOR_NAME}"

WRITE ${PPDOM}.TextEdit copyright \\U00a9\ All\ Rights\ Reserved

WRITE ${PPDOM}.TextEdit NSNavLastRootDirectory -string "${DEFAULT_SAVE_LOCATION}"

ENABLE ${PPDOM}.TextEdit NSQuitAlwaysKeepsWindows

#-----------------------------------------------------------#
# iWork                                                     #
#-----------------------------------------------------------#

for SOME_DOMAIN in Numbers Keynote Pages ; do
	WRITE ${PPDOM}.iWork.${SOME_DOMAIN} NSNavLastRootDirectory -string "${DEFAULT_SAVE_LOCATION}"
	WRITE ${PPDOM}.iWork.${SOME_DOMAIN} TSKRemoteStringsLastLocalization -string ${LANG:0:2}
	if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
		WRITE ${PPDOM}.iWork.${SOME_DOMAIN} TSAICloudAuthorNameKey -string "${AUTHOR_NAME}"
	else
		DELETE ${PPDOM}.iWork.${SOME_DOMAIN} TSAICloudAuthorNameKey
	fi
	WRITE ${PPDOM}.iWork.${SOME_DOMAIN} TSWPIgnoredWordsDictionary -array
	WRITE ${PPDOM}.iWork.${SOME_DOMAIN} RecentFontNames -array LucidaGrande
	if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
		WRITE ${PPDOM}.iWork.${SOME_DOMAIN} DownloadableContentURL -string "https://www.icloud.com/iwork/st/content"
	fi
	for SZ_KEY in NSNavPanelExpandedSizeForOpenMode NSNavPanelExpandedSizeForSaveMode ; do
        	WRITE ${PPDOM}.iWork.${SOME_DOMAIN} ${SZ_KEY} -string "{1024, 512}"
	done ;

	for ENABLE_KEY in NSQuitAlwaysKeepsWindows TSWPAutomaticallyDetectLinks TSWPAutomaticallyDetectLists TSWPGrammarChecking TSWPSpellCheckingEnabled TSWPSuperscriptNumericalSuffixes ; do
		ENABLE ${PPDOM}.iWork.${SOME_DOMAIN} ${ENABLE_KEY}
	done ;
	#WRITE ${PPDOM}.iWork.${SOME_DOMAIN} iCloudRegionInfo -dict "*.icloud.com.cn" '{ AssetHost = "localhost"; Domain = "icloud.com.cn"; DownloadableContentURL = "https://localhost/iwork/st/content"; URL = "https://localhost"; }'
done ;

if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
	WRITE ${PPDOM}.iWork.Keynote KNRemoteCurrentDevicePlaybackUUID -string "${HW_UUID}"
else
	DELETE ${PPDOM}.iWork.Keynote KNRemoteCurrentDevicePlaybackUUID
fi

#-----------------------------------------------------------#
# GoogleDrive                                               #
#-----------------------------------------------------------#

if [[ ( -d "~/Public/Google Drive Drop Box" ) ]] ; then
	WRITE ${GPDOM}.GoogleDrive NSNavLastRootDirectory -string "~/Public/Google Drive Drop Box"
fi
WRITE ${GPDOM}.GoogleDrive "onboarding_complete" -string shown

for SOME_DOMAIN in GoogleDrive Keystone.Agent ; do
	WRITE ${GPDOM}.${SOME_DOMAIN} ReportingAttributes -dict "com.google.Keystone" '{}'
done ;

#-----------------------------------------------------------#
# TurboTax                                                  #
#-----------------------------------------------------------#

for SOME_YEAR in 2015 2016 2017 2018 2019 2020 ; do
        ENABLE com.intuit.turbotax.${SOME_YEAR} "License Signed" ;
done ;

#-----------------------------------------------------------#
# Zoom                                                      #
#-----------------------------------------------------------#

for STRING_KEY in ZoomAccessibilityNotAllowAutoHidden ZoomShouldShowSharingWithSplitView ; do
	WRITE ZoomChat ${STRING_KEY} -string true
done ;

for STRING_KEY in ZoomEnterFullscreenWhenViewShare ZoomEnterMaxWndWhenViewShare ZoomRememberPhoneKey ; do
	WRITE ZoomChat ${STRING_KEY} -string false
done ;

WRITE ZoomChat "conf.webserver.vendor.default" -string "https://zoom.us"

#-----------------------------------------------------------#
# Zoom.xos                                                  #
#-----------------------------------------------------------#

$MKDIR ~/Movies/Zoom 2>/dev/null || true

WRITE us.zoom.xos NSNavLastRootDirectory -string "~/Movies/Zoom"

WRITE us.zoom.xos "User Select Language Identify" -string en

ENABLE us.zoom.xos kCaptureWithoutChatWindow

for DISABLE_KEY in NSQuitAlwaysKeepsWindows kZMSettingVBHaveGreenScreen kZMUserDefaultMainWindowCompressed ; do
	DISABLE us.zoom.xos ${DISABLE_KEY}
done ;

WRITE us.zoom.xos kZMUserDefaultSelectedTabType -int 0

WRITE us.zoom.xos "s_skinToneNum" -int 1

#-----------------------------------------------------------#
# Music                                                     #
#-----------------------------------------------------------#

for SOME_DOMAIN in Music itunes TV ; do
	if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
		WRITE ${PPDOM}.${SOME_DOMAIN} StoreUserInfo -dict ${CLOUD_ID} $"{ UserHandle = \"\"; UserName = '${CLOUD_UN}'; }" ;
		WRITE ${PPDOM}.${SOME_DOMAIN} "Store Apple ID" -string "${CLOUD_EMAIL}"
		WRITE ${PPDOM}.${SOME_DOMAIN} "Store DSID" -int ${CLOUD_ID}
	else
		WRITE ${PPDOM}.${SOME_DOMAIN} StoreUserInfo -dict ;
		DELETE ${PPDOM}.${SOME_DOMAIN} "Store Apple ID"
		DELETE ${PPDOM}.${SOME_DOMAIN} "Store DSID"
	fi
	WRITE ${PPDOM}.${SOME_DOMAIN} userMaxConcurrentDownloads -int "${MAX_DOWNLOAD_CONNECTIONS}"
done ;

WRITE ${PPDOM}.Music encoderName -string "AAC Encoder"


#-----------------------------------------------------------#
# Music - iTunes                                            #
#-----------------------------------------------------------#

if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
WRITE ${PPDOM}.itunes MacBuddyStoreID -string "${CLOUD_EMAIL}"
fi
WRITE ${PPDOM}.itunes "NSNavLastCurrentDirectory:ChooseFile:0" -string "${MUSIC_LIBRARY_LOCATION}"

WRITE ${PPDOM}.itunes "NSNavLastCurrentDirectory:ChooseFolder:0" -string "${MUSIC_LIBRARY_LOCATION}/Media"

WRITE ${PPDOM}.itunes "NSNavLastCurrentDirectory:ChooseObject:0" -string "${MUSIC_LIBRARY_LOCATION}/Media"

DELETE ${PPDOM}.itunes "NSNavLastCurrentDirectory:PutFile:0"

WRITE ${PPDOM}.itunes NSNavLastRootDirectory -string "${DEFAULT_SAVE_LOCATION}"

for ENABLE_KEY in disableArtistConnect disableMusicSocial disablePing dontAutomaticallySyncIPods restrictExplicit restrictExplicitBooks restrictGames restrictMovies restrictTVShows ; do
	ENABLE ${PPDOM}.itunes ${ENABLE_KEY}
done ;

for DISABLE_KEY in NSQuitAlwaysKeepsWindows WebContinuousSpellCheckingEnabled WebKitFullScreenEnabled "com.apple.iTunes.WebKit2AsynchronousSpellCheckingEnabled" "com.apple.iTunes.WebKit2FullScreenEnabled" disableMusicStore disablePodcasts disableRadio disableShareLibraryInfo disableSharedMusic isAccountAdmin ; do
	DISABLE ${PPDOM}.itunes ${DISABLE_KEY}
done ;

WRITE ${PPDOM}.itunes "license-agreements" -dict EA0676 1 EA0708 1 EA0733 1 EA0773 1 EA0814 1 EA0815 1 EA0961 1 EA1067 1 EA1510 1

WRITE ${PPDOM}.itunes recentSearchHints -array ;

WRITE ${PPDOM}.itunes recentSearches -array "DJ \\U00c5m\\U00e5k" ;

#-----------------------------------------------------------#
# TV                                                        #
#-----------------------------------------------------------#

for ENABLE_KEY in NSApplicationCrashOnExceptions cddbPrefsOK ; do
	ENABLE ${PPDOM}.TV ${ENABLE_KEY}
done ;

DISABLE ${PPDOM}.TV preloadFilesIntoMemory

WRITE ${PPDOM}.TV userMaxConcurrentDownloads -int "${MAX_DOWNLOAD_CONNECTIONS}"

#-----------------------------------------------------------#
# Photos                                                    #
#-----------------------------------------------------------#

for DISABLE_KEY in IPXDefaultAutoplayVideos IPXDefaultHasChosenToEnableiCloudPhotosInGettingStarted ; do
	DISABLE ${PPDOM}.Photos ${DISABLE_KEY}
done ;

WRITE ${PPDOM}.Photos NSNavLastRootDirectory -string "~/Pictures"

#-----------------------------------------------------------#
# Amp.MediaSharingd                                         #
#-----------------------------------------------------------#

for DISABLE_KEY in "photo-sharing-enabled" "public-sharing-enabled" ; do
	DISABLE ${PPDOM}.amp.mediasharingd "${DISABLE_KEY}"
done ;

if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
WRITE ${PPDOM}.amp.mediasharingd "home-sharing-settings" -dict "home-sharing-update-play-counts" 1 "home-sharing-user-id" '$CLOUD_ID' "home-sharing-user-name" "${CLOUD_UN}" ;
fi ;

WRITE ${PPDOM}.amp.mediasharingd "photo-sharing-settings" -dict apertureAlbums '()' apertureCopyOriginalPhotos 0 apertureCustomAlbumOrder 0 apertureSyncAllAlbums 0 apertureSyncAllFaces 0 apertureSyncMode 0 apertureSyncPhotoVideos 0 iPhotoAlbums '()' iPhotoCopyOriginalPhotos 0 iPhotoCustomAlbumOrder 0 iPhotoPrefsMajorVersion 0 iPhotoPrefsMinorVersion 0 iPhotoSyncAllAlbums 0 iPhotoSyncAllFaces 0 iPhotoSyncMode 0 iPhotoSyncPhotoVideos 0 iPhotoUpgradedDistinguishedAlbums 0 "photo-sharing-source-id" 0 photosAppAlbums '()' photosAppAutoIncludeEnabled 0 photosAppCopyOriginalPhotos 0 photosAppCustomAlbumOrder 0 photosAppEventCount 255 photosAppOnlyFavorites 0 photosAppSyncAllAlbums 0 photosAppSyncAllFaces 0 photosAppSyncMode 0 photosAppSyncPhotoVideos 0 photosFolderAlbums '()' photosFolderCopyOriginalPhotos 0 photosFolderCustomAlbumOrder 0 photosFolderInfo '{ syncFolderIsFromMac = 0; syncFolderIsValid = 0; }' photosFolderSyncMode 0 photosFolderSyncPhotoVideos 0 psAlbumAlbums '()' psAlbumCopyOriginalPhotos 0 psAlbumCustomAlbumOrder 0 psAlbumSyncMode 0 psAlbumSyncPhotoVideos 0 psElementsAlbums '()' psElementsCopyOriginalPhotos 0 psElementsCustomAlbumOrder 0 psElementsSyncMode 0 psElementsSyncPhotoVideos 0 || true

WRITE ${PPDOM}.amp.mediasharingd "public-sharing-settings" -dict "public-sharing-share-all-playlists" 0

#-----------------------------------------------------------#
# photoanalysisd                                            #
#-----------------------------------------------------------#

WRITE ${PPDOM}.photoanalysisd PHAPhotoLibraryList -dict "~/Pictures/Photos Library.photoslibrary" '{ path = "~/Pictures/Photos Library.photoslibrary"; version = 1; }'

#-----------------------------------------------------------#
# mediaanalysisd                                            #
#-----------------------------------------------------------#

WRITE ${PPDOM}.mediaanalysisd PhotoLibraries -array "~/Pictures/Photos Library.photoslibrary"

#-----------------------------------------------------------#
# cloudphotod                                               #
#-----------------------------------------------------------#
if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
WRITE ${PPDOM}.cloudphotod CPLEngineInfo -dict \
	clientLibraryBasePath -string "~/Pictures/Photos Library.photoslibrary/resources/cpl/cloudsync.noindex" \
	cloudLibraryResourceStoragePath -string "~/Pictures/Photos Library.photoslibrary/resources/cpl/cloudsync.noindex/storage" \
	cloudLibraryStateStoragePath -string "~/Pictures/Photos Library.photoslibrary/resources/cpl/cloudsync.noindex/storage" \
	libraryIdentifier -string MobileSlideShow \
	options -bool YES

DELETE ${PPDOM}.cloudphotod "_CPLPreviousOSBuildVersion" 2>/dev/null || true

DELETE ${PPDOM}.cloudphotod "_CPLPreviousCPLVersion" 2>/dev/null || true
else
DELETE ${PPDOM}.cloudphotod 2>/dev/null || true
fi
#-----------------------------------------------------------#
# photolibraryd                                             #
#-----------------------------------------------------------#

#In photolibraryd, remove PLLibraryBookmarkManagerBookmarksByPath if changed from "~/Pictures/Photos Library.photoslibrary"

WRITE ${PPDOM}.photolibraryd kPLPhotoStreamMPSStateNextCheckDateKey -date "${CURRENT_DATE_TIME}"

#-----------------------------------------------------------#
# photos.shareddefaults                                     #
#-----------------------------------------------------------#

# move to initial setup later to allow pref setting (required at least once)
DELETE ${PPDOM}.photos.shareddefaults iCloudPhotoLibraryHasBeenEnabledAccountIdentifiers ;

if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
#some users
WRITE ${PPDOM}.photos.shareddefaults iCloudPhotoLibraryHasBeenEnabledAccountIdentifiers -array "${CLOUD_UUID}"
fi

WRITE ${PPDOM}.photos.shareddefaults lastHighlightTitlesUpdateDate -date "${CURRENT_DATE_TIME}"
WRITE ${PPDOM}.photos.shareddefaults CPLDefaultDownload -string Default

#-----------------------------------------------------------#
# AppleMediaServices                                        #
#-----------------------------------------------------------#

for ENABLE_KEY in AMSDidRetrieveDeviceOffers AMSDidRetrieveDeviceOffersEligibility AMSDidRetrieveTVOffers ; do
	ENABLE ${PPDOM}.AppleMediaServices.notbackedup ${ENABLE_KEY}
done ;

#-----------------------------------------------------------#
# screencapture                                             #
#-----------------------------------------------------------#

# WARNING: This section is required as is. DO NOT MODIFY.

# Disable shadow in screenshots
ENFORCE_GRAPHICS_MODE ${PPDOM}.screencapture "disable-shadow" NO

if [[ ("${USE_FANCY_GRAPHICS}" == "YES") ]] ; then
	WRITE ${PPDOM}.screencapture type -string heic
else
	# Save screenshots in HEIC format (other options: PNG, BMP, GIF, JPG, PDF, TIFF, HEIC)
	WRITE ${PPDOM}.screencapture type -string heic
fi

$MKDIR ~/Pictures/Screenshots 2>/dev/null || true
WRITE ${PPDOM}.screencapture location -string "~/Pictures/Screenshots"

#WRITE ${PPDOM}.screencapture "last-analytics-stamp" -float "${CURRENT_SECONDS}"

#-----------------------------------------------------------#
# imagecapture                                              #
#-----------------------------------------------------------#

# WARNING: This setting is required as is. DO NOT MODIFY.
# Prevent Photos from opening automatically when devices are plugged in
ENFORCE_DEV_MODE ${PPDOM}.ImageCapture disableHotPlug YES

#-----------------------------------------------------------#
# gamed                                                     #
#-----------------------------------------------------------#
if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
WRITE ${PPDOM}.gamed GKLastPushTokenPlayerID -string "G:${CLOUD_ID}"
fi
#-----------------------------------------------------------#
# Classroom                                                 #
#-----------------------------------------------------------#

for PREFIX_KEY in allowClassroomLockDevice allowClassroomOpenApp allowClassroomOpenURL allowClassroomScreenObservation forceUnpromptedRemoteScreenObservation ; do
	ENABLE ${PPDOM}.Classroom "${PREFIX_KEY}-${ZERO_UUID}:0-ask"
	DISABLE ${PPDOM}.Classroom "${PREFIX_KEY}-${ZERO_UUID}:0"
done ;

for PREFIX_KEY in allowClassroomOpenApp allowClassroomOpenURL ; do
	ENABLE ${PPDOM}.Classroom "${PREFIX_KEY}-ask"
	DISABLE ${PPDOM}.Classroom ${PREFIX_KEY}
done ;

WRITE ${PPDOM}.Classroom classroomRoles -array instructor

#-----------------------------------------------------------#
# QuickTime                                                 #
#-----------------------------------------------------------#

for BAD_KEY in MGRecentDocumentURLBookmarks NSNavLastUserSetHideExtensionButtonState NSNavPanelExpandedSizeForSaveMode "NSWindow Frame NSNavPanelAutosaveName" ; do
	DELETE ${PPDOM}.QuickTimePlayerX "${BAD_KEY}" 2>/dev/null || true ;
done ;

$MKDIR ~/Movies/QuickTime 2>/dev/null || true

WRITE ${PPDOM}.QuickTimePlayerX NSNavLastRootDirectory -string "~/Movies/QuickTime"

# WARNING: This setting is required as is. DO NOT MODIFY.
ENABLE ${PPDOM}.QuickTimePlayerX MGPlayMovieOnOpen

#-----------------------------------------------------------#
# Maps                                                      #
#-----------------------------------------------------------#

WRITE ${PPDOM}.Maps LastClosedWindowViewOptions -dict isMapViewCenteredOnUserLocation 0 mapType 0 preferredDirectionsType 1 showLabels 1 showsUserLocation 1 trafficEnabled 1

# kinda center on nowhere
WRITE ${PPDOM}.Maps LastClosedWindowViewOptions -dict CenterLatitude "49.2425261751518" CenterLongitude "-78.22428722681242" PitchRadians 0 TileSize 512 YawRadians "-0" ZoomLevel "1.965784"

#-----------------------------------------------------------#
# AppleMultitouch                                           #
#-----------------------------------------------------------#

#-----------------------------------------------------------#
# Mouse + Bluetooth Driver                                  #
#-----------------------------------------------------------#

for SOME_DOMAIN in AppleMultitouchMouse driver.AppleBluetoothMultitouch.mouse ; do
	WRITE ${PPDOM}.${SOME_DOMAIN} MouseButtonDivision -int 55
	WRITE ${PPDOM}.${SOME_DOMAIN} MouseButtonMode -string OneButton
	WRITE ${PPDOM}.${SOME_DOMAIN} MouseOneFingerDoubleTapGesture -int 0
	WRITE ${PPDOM}.${SOME_DOMAIN} MouseTwoFingerDoubleTapGesture -int 3
	WRITE ${PPDOM}.${SOME_DOMAIN} MouseTwoFingerHorizSwipeGesture -int 2
	for ENABLE_KEY in MouseHorizontalScroll MouseMomentumScroll MouseVerticalScroll UserPreferences ; do
		ENABLE ${PPDOM}.${SOME_DOMAIN} ${ENABLE_KEY}
	done ;
done ;

#-----------------------------------------------------------#
# Trackpad + Bluetooth Driver                               #
#-----------------------------------------------------------#

for SOME_DOMAIN in AppleMultitouchTrackpad driver.AppleBluetoothMultitouch.trackpad ; do
	WRITE ${PPDOM}.${SOME_DOMAIN} ActuateDetents -int 1
	WRITE ${PPDOM}.${SOME_DOMAIN} DragLock -int 0
	WRITE ${PPDOM}.${SOME_DOMAIN} Dragging -int 0
	WRITE ${PPDOM}.${SOME_DOMAIN} FirstClickThreshold -int 1
	WRITE ${PPDOM}.${SOME_DOMAIN} SecondClickThreshold -int 1
	WRITE ${PPDOM}.${SOME_DOMAIN} TrackpadCornerSecondaryClick -int 0
	WRITE ${PPDOM}.${SOME_DOMAIN} TrackpadFiveFingerPinchGesture -int 2
	WRITE ${PPDOM}.${SOME_DOMAIN} TrackpadFourFingerHorizSwipeGesture -int 2
	WRITE ${PPDOM}.${SOME_DOMAIN} TrackpadFourFingerPinchGesture -int 2
	WRITE ${PPDOM}.${SOME_DOMAIN} TrackpadFourFingerVertSwipeGesture -int 2
	WRITE ${PPDOM}.${SOME_DOMAIN} TrackpadHorizScroll -int 1
	WRITE ${PPDOM}.${SOME_DOMAIN} TrackpadPinch -int 1
	WRITE ${PPDOM}.${SOME_DOMAIN} TrackpadRotate -int 1
	WRITE ${PPDOM}.${SOME_DOMAIN} TrackpadThreeFingerHorizSwipeGesture -int 2
	WRITE ${PPDOM}.${SOME_DOMAIN} TrackpadThreeFingerTapGesture -int 0
	WRITE ${PPDOM}.${SOME_DOMAIN} TrackpadThreeFingerVertSwipeGesture -int 2
	WRITE ${PPDOM}.${SOME_DOMAIN} TrackpadTwoFingerDoubleTapGesture -int 0
	WRITE ${PPDOM}.${SOME_DOMAIN} TrackpadTwoFingerFromRightEdgeSwipeGesture -int 3
	WRITE ${PPDOM}.${SOME_DOMAIN} USBMouseStopsTrackpad -int 0
	WRITE ${PPDOM}.${SOME_DOMAIN} version -int 12 || true
	# WARNING: This setting for TrackpadRightClick is required as is. DO NOT MODIFY.
	for ENABLE_KEY in TrackpadHandResting TrackpadMomentumScroll TrackpadRightClick TrackpadScroll UserPreferences ; do
		ENABLE ${PPDOM}.${SOME_DOMAIN} ${ENABLE_KEY}
	done ;

	for DISABLE_KEY in ForceSuppressed TrackpadThreeFingerDrag ; do
		DISABLE ${PPDOM}.${SOME_DOMAIN} ${DISABLE_KEY}
	done ;
done ;

ENABLE ${PPDOM}.AppleMultitouchTrackpad Clicking
DISABLE ${PPDOM}.driver.AppleBluetoothMultitouch.trackpad Clicking

#Some users like this setting
#ENABLE ${PPDOM}.driver.AppleBluetoothMultitouch.trackpad Clicking

#-----------------------------------------------------------#
# HIToolbox                                                 #
#-----------------------------------------------------------#

# Show language menu in the top right corner of the screen

WRITE ${PPDOM}.HIToolbox AppleCurrentKeyboardLayoutInputSourceID -string "com.apple.keylayout.US"

for ARRAY_KEY in AppleEnabledInputSources AppleSelectedInputSources AppleInputSourceHistory ; do
	WRITE ${PPDOM}.HIToolbox ${ARRAY_KEY} -array '{InputSourceKind = "Keyboard Layout"; "KeyboardLayout ID" = 0; "KeyboardLayout Name" = "U.S.";}' '{"Bundle ID" = "com.apple.CharacterPaletteIM"; InputSourceKind = "Non Keyboard Input Method";}'
done ;
WRITE ${PPDOM}.HIToolbox AppleSelectedInputSources -array '{InputSourceKind = "Keyboard Layout"; "KeyboardLayout ID" = 0; "KeyboardLayout Name" = "U.S.";}'

#-----------------------------------------------------------#
# textInput.keyboardServices.textReplacement                #
#-----------------------------------------------------------#

#buggy
#ENABLE ${PPDOM}.textInput.keyboardServices.textReplacement KSLSShouldUpdateCache
WRITE ${PPDOM}.textInput.keyboardServices.textReplacement kDidInsertSampleShortcutForPeer -string "${LOGNAME:-${USER}}~${HW_UUID}"

#-----------------------------------------------------------#
# TextInputMenu                                             #
#-----------------------------------------------------------#

#buggy
#ENABLE ${PPDOM}.TextInputMenu visible

#-----------------------------------------------------------#
# TextInputMenuAgent                                        #
#-----------------------------------------------------------#

#buggy
#ENABLE ${PPDOM}.TextInputMenuAgent "NSStatusItem Visible Item-0"

#-----------------------------------------------------------#
# FontRegistry                                              #
#-----------------------------------------------------------#

WRITE ${PPDOM}.FontRegistry.user LastUpdated -date "${CURRENT_DATE_TIME}"

#-----------------------------------------------------------#
# Siri + NCService                                          #
#-----------------------------------------------------------#

for SOME_DOMAIN in Siri.SiriTodayExtension SiriNCService ; do
	WRITE ${PPDOM}.${SOME_DOMAIN} AppleLanguages -array $(echo -n "${LANG}" | tr '_-' '-')
	WRITE ${PPDOM}.${SOME_DOMAIN} AppleLocale -string ${LANG}
done ;

#-----------------------------------------------------------#
# siri.context.service                                      #
#-----------------------------------------------------------#

WRITE ${PPDOM}.siri.context.service InstalledLanguages -array $(echo -n "${LANG}" | tr '_-' '-')

#-----------------------------------------------------------#
# speech.recognition.AppleSpeechRecognition.prefs           #
#-----------------------------------------------------------#

ENABLE ${PPDOM}.speech.recognition.AppleSpeechRecognition.prefs DictationIMIntroMessagePresented

#-----------------------------------------------------------#
# assistant.backedup                                        #
#-----------------------------------------------------------#

WRITE ${PPDOM}.assistant.backedup "Modification Dates" -date "${CURRENT_DATE_TIME}"

WRITE ${PPDOM}.assistant.backedup "Session Language" -string $(echo -n "${LANG}" | tr '_-' '-')

#-----------------------------------------------------------#
# assistant.support                                         #
#-----------------------------------------------------------#

ENABLE ${PPDOM}.assistant.support "Dictation Enabled"

WRITE ${PPDOM}.assistant.support "Siri Data Sharing Opt-In Status" -int 2

#-----------------------------------------------------------#
# findmy.*.notbackedup                                      #
#-----------------------------------------------------------#

#defaults find $(defaults read com.apple.findmy.fmfcore.notbackedup publicAPSToken) | grep -o "com.apple.findmy.*.notbackedup" | xargs -L1 -I{} WRITE {} publicAPSToken $(defaults read com.apple.findmy.fmfcore.notbackedup publicAPSToken)

#-----------------------------------------------------------#
# FMF + FMIP                                                #
#-----------------------------------------------------------#

if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
for SOME_DOMAIN in findmy.fmfcore.notbackedup findmy.fmipcore.notbackedup ; do
	WRITE ${PPDOM}.${SOME_DOMAIN} publicAPSToken -string ${TOKEN_ID}
	ENABLE ${PPDOM}.${SOME_DOMAIN} windowVisible
done ;
fi

if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
WRITE ${PPDOM}.findmy.fmfcore.notbackedup FMFGarbageCollectorIdentityKey -string ${CLOUD_ID}
WRITE ${PPDOM}.findmy.fmipcore.notbackedup FMIPGarbageCollectorIdentityKey -string ${CLOUD_ID}
fi

#-----------------------------------------------------------#
# icloud.fmfd                                               #
#-----------------------------------------------------------#
if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
for STRING_KEY in kFMFDlastLoggedInPrsId storedDSID ; do
	WRITE ${PPDOM}.icloud.fmfd ${STRING_KEY} -string ${CLOUD_ID}
done ;
fi
#WRITE ${PPDOM}.icloud.fmfd storedConfigKey -dict-add sendOnlyFMFChannel 1 blockFMFChannel 0

#-----------------------------------------------------------#
# fmip + clientconfiguration                                #
#-----------------------------------------------------------#

WRITE ${PPDOM}.icloud.fmip clientconfiguration -dict-add deviceNameSyncEnabled 1 nearbyScanEnabled 1 nearbyScanWhileAuthenticated 1

#-----------------------------------------------------------#
# fmip.voiceassistantsync                                   #
#-----------------------------------------------------------#
if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
WRITE ${PPDOM}.icloud.fmip.voiceassistantsync object -dict-add ownerPersonId ${CLOUD_ID}
else
DELETE ${PPDOM}.icloud.fmip.voiceassistantsync object 2>/dev/null || true
fi
#-----------------------------------------------------------#
# BKAgentService                                            #
#-----------------------------------------------------------#

DELETE ${PPDOM}.BKAgentService 2>/dev/null || true

DISABLE ${PPDOM}.BKAgentService BKAgentServiceUseriCloudSetting

#-----------------------------------------------------------#
# LaunchServices                                            #
#-----------------------------------------------------------#

# REQUIRED FOR SECURITY
# Enable the "Are you sure you want to open this application?" dialog
ENABLE ${PPDOM}.LaunchServices LSQuarantine

#-----------------------------------------------------------#
# cloudpaird                                                #
#-----------------------------------------------------------#

if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
for ENABLE_KEY in MagicCloudPairingAccessoryEncryptionPreferences MagicCloudPairingMasterEncryptionPreferences MagicCloudPairingProtectedAccessorySubscription SecuredAccessoryZoneSubscription SecuredZoneSubscription ; do
	ENABLE ${PPDOM}.cloudpaird ${ENABLE_KEY}
done ;
fi

#-----------------------------------------------------------#
# corerecents.recentsd                                      #
#-----------------------------------------------------------#

if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
WRITE ${PPDOM}.corerecents.recentsd LastiCloudAccountPersonID -string ${CLOUD_ID}

ENABLE ${PPDOM}.corerecents.recentsd LastiCloudAccountWasLoggedIn
else
DELETE ${PPDOM}.corerecents.recentsd LastiCloudAccountPersonID
DISABLE ${PPDOM}.corerecents.recentsd LastiCloudAccountWasLoggedIn
fi
#-----------------------------------------------------------#
# dashboard                                                 #
#-----------------------------------------------------------#

# WARNING: This setting is required as is. DO NOT MODIFY.
for ENABLE_KEY in "mcx-disabled" ; do
	ENABLE ${PPDOM}.dashboard "${ENABLE_KEY}"
done ;

# WARNING: This setting is required as is. DO NOT MODIFY.
ENFORCE_DEV_MODE ${PPDOM}.dashboard devmode YES

#-----------------------------------------------------------#
# dock                                                      #
#-----------------------------------------------------------#

# Enable group windows by application in Mission Control
# (i.e. use the old Exposé behavior instead)
# Don’t show Dashboard as a Space

# WARNING: This section is required as is. DO NOT MODIFY.
for ENABLE_KEY in show-process-indicators expose-group-by-app dashboard-in-overlay; do
	ENABLE ${PPDOM}.dock ${ENABLE_KEY}
done ;

# WARNING: This setting is required as is. DO NOT MODIFY.
for DOCK_G_KEY in enable-spring-load-actions-on-all-items ; do
	ENFORCE_GRAPHICS_MODE ${PPDOM}.dock ${DOCK_G_KEY} YES
done ;

# WARNING: The setting for mru-spaces is required as is. DO NOT MODIFY.
# Disable Dashboard
# Don’t automatically rearrange Spaces based on most recent use
for DISABLE_KEY in mru-spaces mcx-disabled ; do
	DISABLE ${PPDOM}.dock ${DISABLE_KEY}
done ;

# Set the icon size of Dock items to 36-92 pixels
WRITE ${PPDOM}.dock tilesize -int 64


# Make Dock icons of hidden applications translucent
# add showhidden YES to devlist

# WARNING: This setting is required as is. DO NOT MODIFY.
for DEV_KEY in  minimize-to-application ; do
	ENFORCE_DEV_MODE ${PPDOM}.dock ${DEV_KEY} YES
done ;

# WARNING: This setting is required as is. DO NOT MODIFY.
for DEV_KEY in launchanim ; do
	ENFORCE_DEV_MODE ${PPDOM}.dock ${DEV_KEY} NO
done ;

# WARNING: This setting is required as is. DO NOT MODIFY.
# THIS WILL BE MOVED TO FIRST RUN ONLY SCRIPT IN FUTURE
ENABLE ${PPDOM}.dock autohide

if [[ ("${USE_DEVELOPER_SETUP}" == "YES") ]] ; then
	# Speed up Mission Control animations
	WRITE ${PPDOM}.dock expose-animation-duration -float 0.05
else
	if [[ ("${USE_FANCY_GRAPHICS}" == "YES") ]] ; then
		#allow default speed
		WRITE ${PPDOM}.dock expose-animation-duration -float 0.33
	else
		# Speed up Mission Control animations
		WRITE ${PPDOM}.dock expose-animation-duration -float 0.1
	fi
fi

# Speed up Mission Control animations
WRITE ${PPDOM}.dock expose-animation-duration -float 0.1

# Hot corners
# Possible values:
#  0: no-op
#  2: Mission Control
#  3: Show application windows
#  4: Desktop
#  5: Start screen saver
#  6: Disable screen saver
#  7: Dashboard
# 10: Put display to sleep
# 11: Launchpad
# 12: Notification Center

# Top left screen corner -> Show application windows
WRITE ${PPDOM}.dock wvous-tl-corner -int 3

WRITE ${PPDOM}.dock wvous-tl-modifier -int 0

# Top right screen corner -> Mission Control
WRITE ${PPDOM}.dock wvous-tr-corner -int 2

WRITE ${PPDOM}.dock wvous-tr-modifier -int 0

# Bottom left screen corner -> Disable screen saver
WRITE ${PPDOM}.dock wvous-bl-corner -int 6

WRITE ${PPDOM}.dock wvous-bl-modifier -int 0

# trash safety

# Add a spacer to the right side of the Dock (where the Trash is)
#defaults write com.apple.dock persistent-others -array-add '{tile-data={}; tile-type="spacer-tile";}'

#-----------------------------------------------------------#
# desktopservices                                           #
#-----------------------------------------------------------#

# WARNING: This section is required as is. DO NOT MODIFY.
# Avoid creating .DS_Store files on network or USB volumes
for ENABLE_KEY in DSDontWriteNetworkStores DSDontWriteUSBStores ; do
	ENABLE ${PPDOM}.desktopservices ${ENABLE_KEY}
done ;

#-----------------------------------------------------------#
# helpviewer                                                #
#-----------------------------------------------------------#

# Set Help Viewer windows to non-floating mode
for DEV_KEY in DevMode HVIncludesKBSearches ; do
	ENFORCE_DEV_MODE ${PPDOM}.helpviewer ${DEV_KEY} YES
done ;

if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
ENABLE ${PPDOM}.helpviewer WebKitOfflineWebApplicationCacheEnabled
else
DISABLE ${PPDOM}.helpviewer WebKitOfflineWebApplicationCacheEnabled
fi
#-----------------------------------------------------------#
# imdpersistence.IMDPersistenceAgent                        #
#-----------------------------------------------------------#

ENABLE ${PPDOM}.imdpersistence.IMDPersistenceAgent LogAllIOErrors

#-----------------------------------------------------------#
# Battery                                                   #
#-----------------------------------------------------------#

ENABLE ${PPDOM}.menuextra.battery ShowPercent


#-----------------------------------------------------------#
# print.PrintingPrefs                                       #
#-----------------------------------------------------------#

# Automatically quit printer app once the print jobs complete
ENABLE ${PPDOM}.print.PrintingPrefs "Quit When Finished"

#-----------------------------------------------------------#
# print.add                                                 #
#-----------------------------------------------------------#

WRITE ${PPDOM}.print.add NSNavLastRootDirectory -string "${DEFAULT_SAVE_LOCATION}"

#-----------------------------------------------------------#
# quicklook.ThumbnailsAgent                                 #
#-----------------------------------------------------------#

WRITE ${PPDOM}.quicklook.ThumbnailsAgent QLMTCacheSizeLastCheckAbsoluteTime -float "${CURRENT_SECONDS}"

#-----------------------------------------------------------#
# rapport                                                   #
#-----------------------------------------------------------#
if [[ ($HAS_CLOUD_ID == "YES") ]] ; then
WRITE ${PPDOM}.rapport familySyncedName -string $(scutil --get ComputerName)
else
DELETE ${PPDOM}.rapport familySyncedName
fi

#-----------------------------------------------------------#
# routined                                                  #
#-----------------------------------------------------------#

if [[ ("${USE_DEBUG_SETUP}" == "YES") ]] ; then
	WRITE ${PPDOM}.routined RTDefaultsABTestDeviceSeed -string "95AF5924-8EA6-45C4-A8E4-0253618C7B24"
fi

#-----------------------------------------------------------#
# screensaver                                               #
#-----------------------------------------------------------#

# WARNING: This setting is required as is. DO NOT MODIFY.
# Require password immediately after sleep or screen saver begins
ENABLE ${PPDOM}.screensaver askForPassword

#Needs smartcard
#ENABLE ${PPDOM}.screensaver tokenRemovalAction

# WARNING: This setting is required as is. DO NOT MODIFY.
# Ensures screen locks immediately when requested
WRITE ${PPDOM}.screensaver askForPasswordDelay -int 0

#-----------------------------------------------------------#
# sharingd                                                  #
#-----------------------------------------------------------#

#for ENABLE_KEY in OneTimeAirDropReset2 hashesAreCorrectKey ; do
#	ENABLE ${PPDOM}.sharingd ${ENABLE_KEY}
#done ;

#for DISABLE_KEY in AutoUnlockPresentedBluetoothError AutoUnlockPresentedWiFiError #UserDefaultsHashesDirtyKey ; do
#	DISABLE ${PPDOM}.sharingd ${DISABLE_KEY}
#done ;

#WRITE ${PPDOM}.sharingd lastUpdated -date "2020-09-18 02:22:25 +0000"
#BUGGY
#WRITE ${PPDOM}.sharingd lastUpdated -date "${CURRENT_DATE_TIME}"

#-----------------------------------------------------------#
# stocks.account                                            #
#-----------------------------------------------------------#

ENABLE ${PPDOM}.stocks.account deleteOnNextLaunch

echo ""
#echo "========== Just Finished =========="

#-----------------------------------------------------------#
# DOMAINS FOR ADMIN TO RESEARCH FURTHER                    #
#-----------------------------------------------------------#

#com.apple.mail-shared
#com.apple.FaceTime
#org.whispersystems.signal-desktop
#com.apple.Messages
#com.apple.imessage
#com.apple.imservice.ids.iMessage
#com.apple.Music
#com.apple.findmy
#com.apple.findmy.fmfcore.notbackedup
#com.apple.findmy.fmipcore.notbackedup
#com.apple.keychainaccess
#com.apple.bird
#com.apple.Preview

# Disable Notification Center and remove the menu bar icon
#launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist 2> /dev/null

#-----------------------------------------------------------#
# NO PREFERENCES BELOW THIS POINT                           #
#-----------------------------------------------------------#

# Clean up saved window frame previews
bash <(defaults find "NSWindow Frame " 2>/dev/null | sed -Ee 's/Found [0-9]+ keys in domain /defaults delete /g' | sed -Ee 's/\{.*$//g' | tr -d '\n' | tr -s '}' '\n' | cut -d\= -f 1 | tr -d "\:'" | tr -s ' ') || true ;

# General UI/UX

# Fix for the ancient UTF-8 bug in QuickLook (https://mths.be/bbo)
# Commented out, as this is known to cause problems in various Adobe apps :(
# See https://github.com/mathiasbynens/dotfiles/issues/237
# see setting in .bashrc instead
#echo "0x08000100:0" > ~/.CFUserTextEncoding

# Remove duplicates in the "Open With" menu (also see `lscleanup` alias)
/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user || true

# Set a custom wallpaper image. `DefaultDesktop.jpg` is already a symlink, and
# all wallpapers are in `/Library/Desktop Pictures/`.
#if [[ ("${USE_DEVELOPER_SETUP}" == "YES") ]] ; then
#	rm -rf ~/Library/"Application Support"/Dock/desktoppicture.db
#fi

# Security Settings

# Seeds /dev/random after boot with some more iterations
openssl rand $((($RANDOM*$RANDOM*$RANDOM*$RANDOM)%((16*16)-1))) > /dev/random 2>/dev/null || true

# Stop iTunes from responding to the keyboard media keys
#launchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist 2> /dev/null


# home folder GUI view clean up

# Show the ~/Library folder
if [[ ("${USE_DEVELOPER_SETUP}" == "YES") ]] ; then
	chflags nohidden ~/Library
else
	chflags hidden ~/Library
fi
if [[ ( -d ~/homebrew ) ]] ; then
	chflags hidden ~/homebrew
fi
if [[ ( -d ~/bin ) ]] ; then
	chflags hidden ~/bin
fi
if [[ ( -d ~/ymmv ) ]] ; then
	chflags hidden ~/ymmv
fi

export -n CLOUD_ID
export -n CLOUD_UUID
export -n CLOUD_UN
export -n AUTHOR_NAME
export -n CLOUD_EMAIL
export -n TOKEN_ID
export -n HW_UUID
export -n MUSIC_LIBRARY_LOCATION
export -n PPDOM
export -n GPDOM

# Reset Launchpad, but keep the desktop wallpaper intact
#if [[ ( -d "~/Library/Application Support/Dock" ) ]] ; then
#	find ~/Library/"Application Support"/Dock -name "*-*.db" -maxdepth 1 -delete 2>/dev/null || true
#fi

if [[ ("${USE_DEVELOPER_SETUP}" == "YES") ]] ; then
# If not running interactively, don't do anything
if [[ ( -t 0 ) ]] ; then
echo "Developer Terminal detected. (Restart required)"
echo "try: #kill -3 -1 " ;
echo "try: #ps -o pid -o command -u $USER | grep -vF \"coreauthd\" | sed -E -e 's/^[[:space:]]+//g' | tr -s ' ' ' ' | cut -d\  -f 1 | xargs -L1 -I{} kill -3 {}";
exit 0 ;
fi
fi

###############################################################################
# Kill affected applications                                                  #
###############################################################################

#ps -o pid -o command -u $USER | grep -vF "coreauthd" | sed -E -e 's/^[[:space:]]+//g' | tr -s ' ' ' ' | cut -d\  -f 1 | xargs -L1 -I{} kill -3 {} 2>/dev/null || true ;
kill -QUIT -1 ;

echo "Done. Note that some of these changes require a logout/restart to take effect."

exit 0 ;

====================== NOTES and APPENDIX ==============================

#source ~/.macrc || true

# low-level view configuration

# ==================== MOVE THESE TO SUB SCRIPT=========================

# Show item info to the right of the icons on the desktop
/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:labelOnBottom false" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:labelOnBottom true" ~/Library/Preferences/com.apple.finder.plist


# Increase grid spacing for icons on the desktop and in other icon views
/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:gridSpacing 80" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:gridSpacing 54" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:gridSpacing 100" ~/Library/Preferences/com.apple.finder.plist

# Increase the size of icons on the desktop and in other icon views
/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:iconSize 128" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:iconSize 64" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:iconSize 192" ~/Library/Preferences/com.apple.finder.plist

# ======================== end sub script ===========================

#-----------------------------------------------------------#
# END OF FILE                                               #
#-----------------------------------------------------------#
