#! /bin/bash
# Disclaimer of Warranties.
# A. YOU EXPRESSLY ACKNOWLEDGE AND AGREE THAT, TO THE EXTENT PERMITTED BY
#    APPLICABLE LAW, USE OF THIS SHELL SCRIPT AND ANY SERVICES PERFORMED
#    BY OR ACCESSED THROUGH THIS SHELL SCRIPT IS AT YOUR SOLE RISK AND
#    THAT THE ENTIRE RISK AS TO SATISFACTORY QUALITY, PERFORMANCE, ACCURACY AND
#    EFFORT IS WITH YOU.
#
# B. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SHELL SCRIPT
#    AND SERVICES ARE PROVIDED "AS IS" AND "AS AVAILABLE", WITH ALL FAULTS AND
#    WITHOUT WARRANTY OF ANY KIND, AND THE AUTHOR OF THIS SHELL SCRIPT'S LICENSORS
#    (COLLECTIVELY REFERRED TO AS "THE AUTHOR" FOR THE PURPOSES OF THIS DISCLAIMER)
#    HEREBY DISCLAIM ALL WARRANTIES AND CONDITIONS WITH RESPECT TO THIS SHELL SCRIPT
#    SOFTWARE AND SERVICES, EITHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
#    NOT LIMITED TO, THE IMPLIED WARRANTIES AND/OR CONDITIONS OF
#    MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE,
#    ACCURACY, QUIET ENJOYMENT, AND NON-INFRINGEMENT OF THIRD PARTY RIGHTS.
#
# C. THE AUTHOR DOES NOT WARRANT AGAINST INTERFERENCE WITH YOUR ENJOYMENT OF THE
#    THE AUTHOR's SOFTWARE AND SERVICES, THAT THE FUNCTIONS CONTAINED IN, OR
#    SERVICES PERFORMED OR PROVIDED BY, THIS SHELL SCRIPT WILL MEET YOUR
#    REQUIREMENTS, THAT THE OPERATION OF THIS SHELL SCRIPT OR SERVICES WILL
#    BE UNINTERRUPTED OR ERROR-FREE, THAT ANY SERVICES WILL CONTINUE TO BE MADE
#    AVAILABLE, THAT THIS SHELL SCRIPT OR SERVICES WILL BE COMPATIBLE OR
#    WORK WITH ANY THIRD PARTY SOFTWARE, APPLICATIONS OR THIRD PARTY SERVICES,
#    OR THAT DEFECTS IN THIS SHELL SCRIPT OR SERVICES WILL BE CORRECTED.
#    INSTALLATION OF THIS THE AUTHOR SOFTWARE MAY AFFECT THE USABILITY OF THIRD
#    PARTY SOFTWARE, APPLICATIONS OR THIRD PARTY SERVICES.
#
# D. YOU FURTHER ACKNOWLEDGE THAT THIS SHELL SCRIPT AND SERVICES ARE NOT
#    INTENDED OR SUITABLE FOR USE IN SITUATIONS OR ENVIRONMENTS WHERE THE FAILURE
#    OR TIME DELAYS OF, OR ERRORS OR INACCURACIES IN, THE CONTENT, DATA OR
#    INFORMATION PROVIDED BY THIS SHELL SCRIPT OR SERVICES COULD LEAD TO
#    DEATH, PERSONAL INJURY, OR SEVERE PHYSICAL OR ENVIRONMENTAL DAMAGE,
#    INCLUDING WITHOUT LIMITATION THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
#    NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, LIFE SUPPORT OR
#    WEAPONS SYSTEMS.
#
# E. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY THE AUTHOR
#    SHALL CREATE A WARRANTY. SHOULD THIS SHELL SCRIPT OR SERVICES PROVE DEFECTIVE,
#    YOU ASSUME THE ENTIRE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
#
#    Limitation of Liability.
# F. TO THE EXTENT NOT PROHIBITED BY APPLICABLE LAW, IN NO EVENT SHALL THE AUTHOR
#    BE LIABLE FOR PERSONAL INJURY, OR ANY INCIDENTAL, SPECIAL, INDIRECT OR
#    CONSEQUENTIAL DAMAGES WHATSOEVER, INCLUDING, WITHOUT LIMITATION, DAMAGES
#    FOR LOSS OF PROFITS, CORRUPTION OR LOSS OF DATA, FAILURE TO TRANSMIT OR
#    RECEIVE ANY DATA OR INFORMATION, BUSINESS INTERRUPTION OR ANY OTHER
#    COMMERCIAL DAMAGES OR LOSSES, ARISING OUT OF OR RELATED TO YOUR USE OR
#    INABILITY TO USE THIS SHELL SCRIPT OR SERVICES OR ANY THIRD PARTY
#    SOFTWARE OR APPLICATIONS IN CONJUNCTION WITH THIS SHELL SCRIPT OR
#    SERVICES, HOWEVER CAUSED, REGARDLESS OF THE THEORY OF LIABILITY (CONTRACT,
#    TORT OR OTHERWISE) AND EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE
#    POSSIBILITY OF SUCH DAMAGES. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION
#    OR LIMITATION OF LIABILITY FOR PERSONAL INJURY, OR OF INCIDENTAL OR
#    CONSEQUENTIAL DAMAGES, SO THIS LIMITATION MAY NOT APPLY TO YOU. In no event
#    shall THE AUTHOR's total liability to you for all damages (other than as may
#    be required by applicable law in cases involving personal injury) exceed
#    the amount of five dollars ($5.00). The foregoing limitations will apply
#    even if the above stated remedy fails of its essential purpose.
#
################################################################################
#
# Description: This script generates an ASCII tree of the project's modules, classes, functions,
#  and methods with line characters, supporting nested directories.
# Usage: ./lsmap [directory]

set -euo pipefail

# Function: print_usage
# Description: Prints usage information for the script.
print_usage() {
	printf 'Usage: %s [directory]\n' "$(basename "$0")"
	printf 'Generates an ASCII tree with line characters of modules, classes, functions, and methods in the specified directory.\n'
	printf 'If no directory is specified, defaults to the current directory.\n'
}

# Function: check_dependencies
# Description: Checks if required commands are available.
check_dependencies() {
	local dependencies=("find" "awk")
	for cmd in "${dependencies[@]}"; do
		if ! command -v "$cmd" >/dev/null 2>&1; then
			printf 'Error: Required command "%s" not found in PATH.\n' "$cmd" >&2
			exit 1
		fi
	done
}

# Function: process_directory
# Description: Processes a directory recursively to build the tree.
# Arguments:
#   $1 - The directory to process.
#   $2 - The prefix for the tree lines.
#   $3 - Is this the last entry in its directory?
process_directory() {
	local dir="$1"
	local prefix="$2"
	local is_last="$3"

	printf '%s' "$prefix"
	if [[ "$is_last" == "true" ]]; then
		printf '└── '
		prefix="${prefix}    "
	else
		printf '├── '
		prefix="${prefix}│   "
	fi
	printf '%s\n' "$(basename "$dir")"

	local entries=()
	while IFS= read -r -d '' entry; do
		entries+=("$entry")
	done < <(find "$dir" -maxdepth 1 -mindepth 1 -print0 | sort -z)

	local total="${#entries[@]}"
	local index=0
	for entry in "${entries[@]}"; do
		((index++))
		if [ "$index" -eq "$total" ]; then
			child_is_last="true"
		else
			child_is_last="false"
		fi

		if [ -d "$entry" ]; then
			process_directory "$entry" "$prefix" "$child_is_last"
		elif [ -f "$entry" ]; then
			if [[ "$entry" == *.py ]]; then
				process_python_file "$entry" "$prefix" "$child_is_last"
			elif [[ "$entry" == *.sh ]]; then
				process_shell_script "$entry" "$prefix" "$child_is_last"
			else
				printf '%s' "$prefix"
				if [[ "$child_is_last" == "true" ]]; then
					printf '└── '
				else
					printf '├── '
				fi
				printf '%s\n' "$(basename "$entry")"
			fi
		fi
	done
}

# Function: process_python_file
# Description: Processes a Python file to extract classes and functions.
# Arguments:
#   $1 - The Python file to process.
#   $2 - The prefix for the tree lines.
#   $3 - Is this the last entry in its directory?
process_python_file() {
	local file="$1"
	local prefix="$2"
	local is_last="$3"

	printf '%s' "$prefix"
	if [[ "$is_last" == "true" ]]; then
		printf '└── '
		new_prefix="${prefix}    "
	else
		printf '├── '
		new_prefix="${prefix}│   "
	fi
	printf '%s\n' "$(basename "$file")"

	awk -v prefix="$new_prefix" '
	function print_tree(p, name, is_last) {
		printf "%s", p
		if (is_last == 1) {
			printf "└── "
			p = p "    "
		} else {
			printf "├── "
			p = p "│   "
		}
		print name
		return p
	}
	function get_indent(line) {
		match(line, /^[ \t]*/)
		return RLENGTH
	}
	BEGIN {
		level = 0
		indent_stack[0] = prefix
		indents[0] = 0
	}
	/^[[:space:]]*class[[:space:]]+[A-Za-z_][A-Za-z0-9_]*.*:/ {
		line = $0
		curr_indent = get_indent(line)
		class_name = $2
		sub("\\(.*", "", class_name)

		while (level > 0 && curr_indent <= indents[level]) {
			level--
		}

		prefix = indent_stack[level]
		is_last = 0
		prefix = print_tree(prefix, "Class: " class_name, is_last)

		level++
		indents[level] = curr_indent
		indent_stack[level] = prefix
		next
	}
	/^[[:space:]]*def[[:space:]]+[A-Za-z_][A-Za-z0-9_]*.*:/ {
		line = $0
		curr_indent = get_indent(line)

		while (level > 0 && curr_indent <= indents[level]) {
			level--
		}

		prefix = indent_stack[level]
		func_name = $2
		sub("\\(.*", "", func_name)
		is_last = 0
		print_tree(prefix, (level > 0 ? "Method: " : "Function: ") func_name, is_last)
		next
	}
	' "$file"
}

# Function: process_shell_script
# Description: Processes a shell script to extract variables and functions.
# Arguments:
#   $1 - The shell script file to process.
#   $2 - The prefix for the tree lines.
#   $3 - Is this the last entry in its directory?
process_shell_script() {
	local file="$1"
	local prefix="$2"
	local is_last="$3"

	printf '%s' "$prefix"
	if [[ "$is_last" == "true" ]]; then
		printf '└── '
		new_prefix="${prefix}    "
	else
		printf '├── '
		new_prefix="${prefix}│   "
	fi
	printf '%s\n' "$(basename "$file")"

	awk -v prefix="$new_prefix" '
	function print_tree(p, name, is_last) {
		printf "%s", p
		if (is_last == 1) {
			printf "└── "
		} else {
			printf "├── "
		}
		print name
	}
	/^[[:space:]]*([a-zA-Z_][a-zA-Z0-9_]*)=/ {
		var_name = $1
		sub("=.*", "", var_name)
		print_tree(prefix, "Variable: " var_name, 0)
	}
	/^[[:space:]]*function[[:space:]]+([a-zA-Z_][a-zA-Z0-9_]*)/ {
		func_name = $2
		print_tree(prefix, "Function: " func_name, 0)
	}
	/^[[:space:]]*([a-zA-Z_][a-zA-Z0-9_]*)\(\)[[:space:]]*\{/ {
		func_name = $1
		print_tree(prefix, "Function: " func_name, 0)
	}
	' "$file"
}

# Main function
main() {
	local target_dir="${1:-.}"
	check_dependencies
	process_directory "$target_dir" "" "true"
}

# Check for help option
if [[ "${1:-}" == '-h' || "${1:-}" == '--help' ]]; then
	print_usage
	exit 0
fi

# Execute the main function with all arguments
main "$@"
