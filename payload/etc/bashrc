# System-wide .bashrc file for interactive bash(1) shells.


# This file is NOT PART of YMMV's MIT LICENSE CONTENT 
# as it is modified from versious projects and thus my contributions
# are probably subject to GPL ... so assume this file is GPL covered.

# To enable the settings / commands in this file for login shells as well,
# this file has to be sourced in /etc/profile.
if [[ ( `umask` -lt 27 ) ]] ; then umask 022 ; fi ;

# configure paths
function pathappend() {
  for PATH_ARG in "$@" ; do
    if [[ -d "$PATH_ARG" ]] && [[ ":$PATH:" != *":$PATH_ARG:"* ]] ; then
        PATH="${PATH:+"$PATH:"}$PATH_ARG" ;
    export PATH ;
    fi
  done
  unset PATH_ARG 2>/dev/null || true ;
}

function manappend() {
  for MAN_ARG in "$@" ; do
    if [[ -d "$MAN_ARG" ]] && [[ ":$MANPATH:" != *":$MAN_ARG:"* ]] ; then
        MANPATH="${MANPATH:+"$MANPATH:"}$MAN_ARG" ;
    export MANPATH ;
    fi
  done
  unset MAN_ARG 2>/dev/null || true ;
}

if [[ $( \uname -s ) == "Darwin" ]] ; then
	export BASH_SILENCE_DEPRECATION_WARNING=1
else
	# make less more friendly for non-text input files, see lesspipe(1)
	[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
fi

# enable this to force use of docker bin
# pathappend /Applications/Docker.app/Contents/Resources/bin
pathappend /usr/local/MacGPG2/bin

# enable this to force color use
#export CAN_USE_COLOR_IN_ENVIORMENT=1 ;

if [[ ( -r /etc/environment ) ]] ; then
	if [[ ( ${FORCE_RELOAD_BASH_ENV:-2} -ge 1 ) ]] ; then
		source /etc/environment ;
		export FORCE_RELOAD_BASH_ENV=0;
		[ -r "/etc/bashrc_$TERM_PROGRAM" ] && . "/etc/bashrc_$TERM_PROGRAM"
	fi
fi

# If not running interactively, don't do anything
[ -z "$PS1" ] && return
umask 027

# harden homebrew
export HOMEBREW_NO_ANALYTICS=1 ;
export HOMEBREW_NO_INSECURE_REDIRECT=1 ;
export HOMEBREW_CASK_OPTS=--require-sha ;

#--------------------------------------------------------------
#  Automatic setting of $DISPLAY (if not set already).
#  This works for me - your mileage may vary. . . .
#  The problem is that different types of terminals give
#+ different answers to 'who am i' (rxvt in particular can be
#+ troublesome) - however this code seems to work in a majority
#+ of cases.
#--------------------------------------------------------------

function get_xserver ()
{
    case $TERM in
        xterm*color)
            XSERVER=$(who am i | grep -oE "([12]?[0-9]?[0-9]{1}[\.]{1}){3}([12]?[0-9]?[0-9]{1}){1}" | head -n 1 ) ;
            # Ane-Pieter Wieringa suggests the following alternative:
            #  I_AM=$(who am i)
            #  SERVER=${I_AM#*(}
            #  SERVER=${SERVER%*)}
            XSERVER=${XSERVER%%:*} ;
            CAN_USE_COLOR_IN_ENVIORMENT=1 ;
            ;;
        xterm*)
            XSERVER=$(who am i | awk '{print $NF}' | tr -d ')''(' )
            # Ane-Pieter Wieringa suggests the following alternative:
            #  I_AM=$(who am i)
            #  SERVER=${I_AM#*(}
            #  SERVER=${SERVER%*)}
            XSERVER=${XSERVER%%:*}
            ;;
        aterm | rxvt)
            # Find some code that works here. ...
            ;;
    esac
}

if [ -z ${DISPLAY:-""} ]; then
    get_xserver
    if [[ -z ${XSERVER}  || ${XSERVER} == $(hostname) ||
	${XSERVER} == "unix" ]]; then
          DISPLAY="${HOSTNAME:-127.0.0.1}:0.0"          # Display on local host.
    else
       DISPLAY=${XSERVER:-127.0.0.1}:0.0     # Display on remote host.
    fi
fi



declare USE_COLOR_IN_ENVIORMENT="${USE_COLOR_IN_ENVIORMENT:-${CAN_USE_COLOR_IN_ENVIORMENT:=0}}" ;

export DISPLAY ;
export USE_COLOR_IN_ENVIORMENT ;

#-------------------------------------------------------------
# Some settings
#-------------------------------------------------------------

#set -o nounset     # These  two options are useful for debugging.
#set -o xtrace
alias debug="set -o nounset; set -o xtrace"

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
#if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
#    debian_chroot=$(cat /etc/debian_chroot)
#fi

# set a fancy prompt (non-color, overwrite the one in /etc/profile)
#PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '

# Commented out, don't overwrite xterm -T "title" -n "icontitle" by default.
# If this is an xterm set the title to user@host:dir
#case "$TERM" in
#xterm*|rxvt*)
#    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
#    ;;
#*)
#    ;;
#esac

# enable bash completion in interactive shells
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    source /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    source /etc/bash_completion
  fi
fi

# set up man page search
manappend /usr/share/man
manappend /usr/local/share/man
manappend /usr/local/MacGPG2/share/man
export MANPATH

# if the command-not-found package is installed, use it
if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
	function command_not_found_handle {
	        # check because c-n-f could've been removed in the meantime
                if [ -x /usr/lib/command-not-found ]; then
		   /usr/lib/command-not-found -- "$1"
                   return $?
                elif [ -x /usr/share/command-not-found/command-not-found ]; then
		   /usr/share/command-not-found/command-not-found -- "$1"
                   return $?
		else
		   printf "%s: command not found\n" "$1" >&2
		   return 127
		fi
	}
fi

[ -r "/etc/bashrc_$TERM_PROGRAM" ] && . "/etc/bashrc_$TERM_PROGRAM"

# This file is NOT PART of YMMV's MIT LICENSE CONTENT 
# as it is modified from versious projects and thus my contributions
# are probably subject to GPL ... so assume this file is GPL covered.
